Index: app/src/main/java/com/eugene_poroshin/money_manager/fragments/AddCategoryDialogFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.fragments\r\n\r\nimport android.app.Dialog\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.WindowManager\r\nimport android.widget.EditText\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.fragment.app.DialogFragment\r\nimport com.eugene_poroshin.money_manager.R\r\n\r\nclass AddCategoryDialogFragment : DialogFragment() {\r\n\r\n    private var editText: EditText? = null\r\n\r\n    interface EditNameDialogListener {\r\n        fun onFinishEditDialog(inputText: String?)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        return inflater.inflate(R.layout.dialog_fragment_add_category, container, false)\r\n    }\r\n\r\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val builder =\r\n            AlertDialog.Builder(requireActivity())\r\n        val inflater = requireActivity().layoutInflater\r\n        builder.setTitle(\"Добавление новой категории\")\r\n        builder.setView(inflater.inflate(R.layout.dialog_fragment_add_category, null))\r\n            .setPositiveButton(\"Добавить\") { _, _ -> sendBackResult() }\r\n            .setNegativeButton(\"Отмена\") { dialog, _ -> dialog?.dismiss() }\r\n        return builder.create()\r\n    }\r\n\r\n    private fun sendBackResult() {\r\n        editText = dialog!!.findViewById(R.id.edit_text_category_name)\r\n        editText?.requestFocus()\r\n        dialog!!.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE)\r\n        val listener = targetFragment as EditNameDialogListener?\r\n        listener!!.onFinishEditDialog(editText?.text.toString())\r\n        dismiss()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/fragments/AddCategoryDialogFragment.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/fragments/AddCategoryDialogFragment.kt	(date 1604322472589)
@@ -2,48 +2,43 @@
 
 import android.app.Dialog
 import android.os.Bundle
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.view.WindowManager
 import android.widget.EditText
+import android.widget.Toast
 import androidx.appcompat.app.AlertDialog
+import androidx.core.os.bundleOf
 import androidx.fragment.app.DialogFragment
+import androidx.fragment.app.setFragmentResult
 import com.eugene_poroshin.money_manager.R
 
-class AddCategoryDialogFragment : DialogFragment() {
+class AddCategoryDialogFragment : DialogFragment(R.layout.dialog_fragment_add_category) {
 
     private var editText: EditText? = null
 
-    interface EditNameDialogListener {
-        fun onFinishEditDialog(inputText: String?)
-    }
-
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        return inflater.inflate(R.layout.dialog_fragment_add_category, container, false)
-    }
-
     override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
-        val builder =
-            AlertDialog.Builder(requireActivity())
-        val inflater = requireActivity().layoutInflater
+        val builder = AlertDialog.Builder(requireActivity())
         builder.setTitle("Добавление новой категории")
-        builder.setView(inflater.inflate(R.layout.dialog_fragment_add_category, null))
+        builder.setView(requireActivity().layoutInflater.inflate(R.layout.dialog_fragment_add_category, null))
             .setPositiveButton("Добавить") { _, _ -> sendBackResult() }
-            .setNegativeButton("Отмена") { dialog, _ -> dialog?.dismiss() }
+            .setNegativeButton("Отмена", null)
         return builder.create()
     }
 
     private fun sendBackResult() {
-        editText = dialog!!.findViewById(R.id.edit_text_category_name)
-        editText?.requestFocus()
-        dialog!!.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE)
-        val listener = targetFragment as EditNameDialogListener?
-        listener!!.onFinishEditDialog(editText?.text.toString())
-        dismiss()
+        //todo Fragment Result Listener - is it ok?
+        editText = dialog?.findViewById(R.id.edit_text_category_name)
+        val result = editText?.text?.toString()?.capitalize()
+        when (result) {
+            "" -> Toast.makeText(context, "Введите название категории", Toast.LENGTH_SHORT).show()
+            null -> Toast.makeText(context, "Введите название категории", Toast.LENGTH_SHORT).show()
+            else -> {
+                setFragmentResult("requestKey", bundleOf("bundleKey" to result))
+                dismiss()
+            }
+        }
     }
+
+    override fun onDestroyView() {
+        editText = null
+        super.onDestroyView()
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/eugene_poroshin/money_manager/categories/CategoriesFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.categories\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.view.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.Toolbar\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.eugene_poroshin.money_manager.R\r\nimport com.eugene_poroshin.money_manager.di.App\r\nimport com.eugene_poroshin.money_manager.fragments.AddCategoryDialogFragment\r\nimport com.eugene_poroshin.money_manager.fragments.AddCategoryDialogFragment.EditNameDialogListener\r\nimport com.eugene_poroshin.money_manager.fragments.FragmentCommunicator\r\nimport com.eugene_poroshin.money_manager.fragments.OnFragmentActionListener\r\nimport com.eugene_poroshin.money_manager.repo.database.AccountEntity\r\nimport com.eugene_poroshin.money_manager.repo.database.CategoryEntity\r\nimport java.util.*\r\nimport javax.inject.Inject\r\n\r\nclass CategoriesFragment : Fragment(), EditNameDialogListener {\r\n\r\n    @Inject\r\n    lateinit var viewModel: CategoryViewModel\r\n\r\n    private var onFragmentActionListener: OnFragmentActionListener? = null\r\n    private var toolbar: Toolbar? = null\r\n    private var recyclerView: RecyclerView? = null\r\n    private var adapter: CategoriesAdapter? = null\r\n    private var categories: List<CategoryEntity> = ArrayList()\r\n    private var addCategoryDialogFragment: AddCategoryDialogFragment? = null\r\n    private val communicator = object : FragmentCommunicator {\r\n        override fun onItemClickListener(categoryName: String?) {}\r\n        override fun onItemAccountClickListener(accountEntity: AccountEntity?) {}\r\n    }\r\n\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        if (context is OnFragmentActionListener) {\r\n            onFragmentActionListener = context\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        App.appComponent.fragmentSubComponentBuilder().with(this).build().inject(this)\r\n        super.onCreate(savedInstanceState)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_categories, container, false)\r\n        toolbar = view.findViewById(R.id.my_toolbar)\r\n        (activity as AppCompatActivity?)!!.setSupportActionBar(toolbar)\r\n        setHasOptionsMenu(true)\r\n        recyclerView = view.findViewById(R.id.recycler_view_categories)\r\n        return view\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(\r\n        menu: Menu,\r\n        inflater: MenuInflater\r\n    ) {\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n        inflater.inflate(R.menu.categories_menu, menu)\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == R.id.action_add_category) {\r\n            addCategoryDialogFragment = AddCategoryDialogFragment()\r\n            addCategoryDialogFragment!!.setTargetFragment(this@CategoriesFragment, 1)\r\n            addCategoryDialogFragment!!.show(\r\n                parentFragmentManager,\r\n                addCategoryDialogFragment!!::class.java.name\r\n            )\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n\r\n    override fun onFinishEditDialog(inputText: String?) {\r\n        if (inputText != null) viewModel.insert(CategoryEntity(inputText))\r\n        if (onFragmentActionListener != null) {\r\n            onFragmentActionListener!!.onOpenCategoriesFragment()\r\n        }\r\n    }\r\n\r\n    override fun onViewCreated(\r\n        view: View,\r\n        savedInstanceState: Bundle?\r\n    ) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        adapter = CategoriesAdapter(categories, communicator)\r\n        recyclerView!!.layoutManager = LinearLayoutManager(activity)\r\n        recyclerView!!.adapter = adapter\r\n        viewModel.liveDataCategories.observe(\r\n            viewLifecycleOwner,\r\n            Observer { categoryEntities ->\r\n                categories = categoryEntities\r\n                adapter!!.setCategories(categories)\r\n            })\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        onFragmentActionListener = null\r\n    }\r\n\r\n    companion object {\r\n        fun newInstance(): CategoriesFragment {\r\n            return CategoriesFragment()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/categories/CategoriesFragment.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/categories/CategoriesFragment.kt	(date 1604311479651)
@@ -1,18 +1,14 @@
 package com.eugene_poroshin.money_manager.categories
 
-import android.content.Context
 import android.os.Bundle
-import android.view.*
-import androidx.appcompat.app.AppCompatActivity
-import androidx.appcompat.widget.Toolbar
+import android.view.View
 import androidx.fragment.app.Fragment
-import androidx.lifecycle.Observer
+import androidx.fragment.app.setFragmentResultListener
 import androidx.recyclerview.widget.LinearLayoutManager
-import androidx.recyclerview.widget.RecyclerView
 import com.eugene_poroshin.money_manager.R
+import com.eugene_poroshin.money_manager.databinding.FragmentCategoriesBinding
 import com.eugene_poroshin.money_manager.di.App
 import com.eugene_poroshin.money_manager.fragments.AddCategoryDialogFragment
-import com.eugene_poroshin.money_manager.fragments.AddCategoryDialogFragment.EditNameDialogListener
 import com.eugene_poroshin.money_manager.fragments.FragmentCommunicator
 import com.eugene_poroshin.money_manager.fragments.OnFragmentActionListener
 import com.eugene_poroshin.money_manager.repo.database.AccountEntity
@@ -20,14 +16,14 @@
 import java.util.*
 import javax.inject.Inject
 
-class CategoriesFragment : Fragment(), EditNameDialogListener {
+class CategoriesFragment : Fragment(R.layout.fragment_categories) {
+
+    private var binding: FragmentCategoriesBinding? = null
 
     @Inject
     lateinit var viewModel: CategoryViewModel
 
-    private var onFragmentActionListener: OnFragmentActionListener? = null
-    private var toolbar: Toolbar? = null
-    private var recyclerView: RecyclerView? = null
+    private val onFragmentActionListener: OnFragmentActionListener? get() = activity as? OnFragmentActionListener?
     private var adapter: CategoriesAdapter? = null
     private var categories: List<CategoryEntity> = ArrayList()
     private var addCategoryDialogFragment: AddCategoryDialogFragment? = null
@@ -36,83 +32,79 @@
         override fun onItemAccountClickListener(accountEntity: AccountEntity?) {}
     }
 
-    override fun onAttach(context: Context) {
-        super.onAttach(context)
-        if (context is OnFragmentActionListener) {
-            onFragmentActionListener = context
-        }
-    }
-
     override fun onCreate(savedInstanceState: Bundle?) {
         App.appComponent.fragmentSubComponentBuilder().with(this).build().inject(this)
         super.onCreate(savedInstanceState)
-    }
-
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        val view = inflater.inflate(R.layout.fragment_categories, container, false)
-        toolbar = view.findViewById(R.id.my_toolbar)
-        (activity as AppCompatActivity?)!!.setSupportActionBar(toolbar)
-        setHasOptionsMenu(true)
-        recyclerView = view.findViewById(R.id.recycler_view_categories)
-        return view
-    }
-
-    override fun onCreateOptionsMenu(
-        menu: Menu,
-        inflater: MenuInflater
-    ) {
-        super.onCreateOptionsMenu(menu, inflater)
-        inflater.inflate(R.menu.categories_menu, menu)
-    }
-
-    override fun onOptionsItemSelected(item: MenuItem): Boolean {
-        if (item.itemId == R.id.action_add_category) {
-            addCategoryDialogFragment = AddCategoryDialogFragment()
-            addCategoryDialogFragment!!.setTargetFragment(this@CategoriesFragment, 1)
-            addCategoryDialogFragment!!.show(
-                parentFragmentManager,
-                addCategoryDialogFragment!!::class.java.name
-            )
-            return true
+        setFragmentResultListener("requestKey") { _, bundle ->
+            val result = bundle.getString("bundleKey")
+            result?.let {
+                viewModel.insert(CategoryEntity(it))
+                openCategoriesFragment()
+            }
+            onFragmentActionListener?.onOpenCategoriesFragment()
         }
-        return super.onOptionsItemSelected(item)
     }
-
-    override fun onFinishEditDialog(inputText: String?) {
-        if (inputText != null) viewModel.insert(CategoryEntity(inputText))
-        if (onFragmentActionListener != null) {
-            onFragmentActionListener!!.onOpenCategoriesFragment()
-        }
-    }
 
     override fun onViewCreated(
         view: View,
         savedInstanceState: Bundle?
     ) {
         super.onViewCreated(view, savedInstanceState)
+        binding = FragmentCategoriesBinding.bind(view)
+        initToolbar()
         adapter = CategoriesAdapter(categories, communicator)
-        recyclerView!!.layoutManager = LinearLayoutManager(activity)
-        recyclerView!!.adapter = adapter
+        binding!!.recyclerViewCategories.layoutManager = LinearLayoutManager(activity)
+        binding!!.recyclerViewCategories.adapter = adapter
         viewModel.liveDataCategories.observe(
             viewLifecycleOwner,
-            Observer { categoryEntities ->
+            { categoryEntities ->
                 categories = categoryEntities
                 adapter!!.setCategories(categories)
             })
     }
 
-    override fun onDestroy() {
-        super.onDestroy()
-        onFragmentActionListener = null
+    private fun initToolbar() {
+        binding!!.myToolbar.inflateMenu(R.menu.categories_menu)
+        binding!!.myToolbar.setOnMenuItemClickListener {
+            when (it.itemId) {
+                R.id.action_add_category -> showAddDialogFragment()
+            }
+            true
+        }
+    }
+
+    private fun showAddDialogFragment() {
+        addCategoryDialogFragment = AddCategoryDialogFragment()
+        addCategoryDialogFragment!!.show(
+            parentFragmentManager,
+            addCategoryDialogFragment!!::class.java.name
+        )
+    }
+
+    private fun openCategoriesFragment() {
+        requireActivity().supportFragmentManager
+            .beginTransaction()
+            .replace(
+                R.id.fragmentContainer,
+                getInstance(),
+                getInstance()::class.java.simpleName
+            )
+            .commit()
+    }
+
+    override fun onDestroyView() {
+        binding = null
+        super.onDestroyView()
     }
 
     companion object {
-        fun newInstance(): CategoriesFragment {
-            return CategoriesFragment()
+        private var INSTANCE: CategoriesFragment? = null
+
+        fun getInstance(): CategoriesFragment {
+            return if(INSTANCE == null) {
+                INSTANCE = CategoriesFragment()
+                INSTANCE!!
+            } else INSTANCE!!
         }
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/eugene_poroshin/money_manager/operations/OperationsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.operations\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.Toolbar\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.eugene_poroshin.money_manager.AddOperationActivity\r\nimport com.eugene_poroshin.money_manager.R\r\nimport com.eugene_poroshin.money_manager.di.App\r\nimport com.eugene_poroshin.money_manager.fragments.FragmentCommunicator\r\nimport com.eugene_poroshin.money_manager.operations.OperationsFragment\r\nimport com.eugene_poroshin.money_manager.repo.database.AccountEntity\r\nimport com.eugene_poroshin.money_manager.repo.database.Operation\r\nimport java.util.*\r\nimport javax.inject.Inject\r\n\r\nclass OperationsFragment : Fragment() {\r\n\r\n    @Inject\r\n    lateinit var viewModel: OperationsViewModel\r\n\r\n    private var toolbar: Toolbar? = null\r\n    private var recyclerView: RecyclerView? = null\r\n    private lateinit var adapter: OperationsAdapter\r\n    private var operations: List<Operation> = ArrayList()\r\n    private var textViewPressPlus: TextView? = null\r\n    private val communicator = object : FragmentCommunicator {\r\n        override fun onItemClickListener(categoryName: String?) {}\r\n        override fun onItemAccountClickListener(accountEntity: AccountEntity?) {}\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        App.appComponent.fragmentSubComponentBuilder().with(this).build().inject(this)\r\n        super.onCreate(savedInstanceState)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view =\r\n            inflater.inflate(R.layout.fragment_operations, container, false)\r\n        toolbar = view.findViewById(R.id.my_toolbar)\r\n        (activity as AppCompatActivity?)!!.setSupportActionBar(toolbar)\r\n        setHasOptionsMenu(true)\r\n        view.findViewById<View>(R.id.fabAddOperation)\r\n            .setOnClickListener {\r\n                val intent = Intent(requireActivity(), AddOperationActivity::class.java)\r\n                startActivity(intent)\r\n            }\r\n        recyclerView = view.findViewById(R.id.recycler_view_operations)\r\n        textViewPressPlus = view.findViewById(R.id.textViewPressPlus)\r\n        return view\r\n    }\r\n\r\n    override fun onViewCreated(\r\n        view: View,\r\n        savedInstanceState: Bundle?\r\n    ) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        adapter = OperationsAdapter(operations, communicator)\r\n        recyclerView!!.layoutManager = LinearLayoutManager(activity)\r\n        recyclerView!!.adapter = adapter\r\n        viewModel.liveData.observe(viewLifecycleOwner, Observer { operations ->\r\n                this.operations = operations\r\n                operations?.let { adapter.setOperations(it) }\r\n                if (operations.isNotEmpty()) textViewPressPlus!!.visibility = View.GONE\r\n            })\r\n    }\r\n\r\n    companion object {\r\n        fun newInstance(): OperationsFragment {\r\n            return OperationsFragment()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/operations/OperationsFragment.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/operations/OperationsFragment.kt	(date 1604316174969)
@@ -2,37 +2,29 @@
 
 import android.content.Intent
 import android.os.Bundle
-import android.view.LayoutInflater
 import android.view.View
-import android.view.ViewGroup
-import android.widget.TextView
-import androidx.appcompat.app.AppCompatActivity
-import androidx.appcompat.widget.Toolbar
 import androidx.fragment.app.Fragment
-import androidx.lifecycle.Observer
-import androidx.lifecycle.ViewModelProvider
 import androidx.recyclerview.widget.LinearLayoutManager
-import androidx.recyclerview.widget.RecyclerView
 import com.eugene_poroshin.money_manager.AddOperationActivity
 import com.eugene_poroshin.money_manager.R
+import com.eugene_poroshin.money_manager.databinding.FragmentOperationsBinding
 import com.eugene_poroshin.money_manager.di.App
 import com.eugene_poroshin.money_manager.fragments.FragmentCommunicator
-import com.eugene_poroshin.money_manager.operations.OperationsFragment
 import com.eugene_poroshin.money_manager.repo.database.AccountEntity
 import com.eugene_poroshin.money_manager.repo.database.Operation
+import com.eugene_poroshin.money_manager.statistics.StatisticsFragment
 import java.util.*
 import javax.inject.Inject
 
-class OperationsFragment : Fragment() {
+class OperationsFragment : Fragment(R.layout.fragment_operations) {
+
+    private var binding: FragmentOperationsBinding? = null
 
     @Inject
     lateinit var viewModel: OperationsViewModel
 
-    private var toolbar: Toolbar? = null
-    private var recyclerView: RecyclerView? = null
     private lateinit var adapter: OperationsAdapter
     private var operations: List<Operation> = ArrayList()
-    private var textViewPressPlus: TextView? = null
     private val communicator = object : FragmentCommunicator {
         override fun onItemClickListener(categoryName: String?) {}
         override fun onItemAccountClickListener(accountEntity: AccountEntity?) {}
@@ -43,44 +35,39 @@
         super.onCreate(savedInstanceState)
     }
 
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        val view =
-            inflater.inflate(R.layout.fragment_operations, container, false)
-        toolbar = view.findViewById(R.id.my_toolbar)
-        (activity as AppCompatActivity?)!!.setSupportActionBar(toolbar)
-        setHasOptionsMenu(true)
-        view.findViewById<View>(R.id.fabAddOperation)
-            .setOnClickListener {
-                val intent = Intent(requireActivity(), AddOperationActivity::class.java)
-                startActivity(intent)
-            }
-        recyclerView = view.findViewById(R.id.recycler_view_operations)
-        textViewPressPlus = view.findViewById(R.id.textViewPressPlus)
-        return view
-    }
-
     override fun onViewCreated(
         view: View,
         savedInstanceState: Bundle?
     ) {
         super.onViewCreated(view, savedInstanceState)
+        //todo bind or inflate \/
+        binding = FragmentOperationsBinding.bind(view)
+        binding!!.fabAddOperation.setOnClickListener {
+            startActivity(Intent(requireActivity(), AddOperationActivity::class.java))
+        }
         adapter = OperationsAdapter(operations, communicator)
-        recyclerView!!.layoutManager = LinearLayoutManager(activity)
-        recyclerView!!.adapter = adapter
-        viewModel.liveData.observe(viewLifecycleOwner, Observer { operations ->
-                this.operations = operations
-                operations?.let { adapter.setOperations(it) }
-                if (operations.isNotEmpty()) textViewPressPlus!!.visibility = View.GONE
-            })
+        binding!!.recyclerViewOperations.layoutManager = LinearLayoutManager(activity)
+        binding!!.recyclerViewOperations.adapter = adapter
+        viewModel.liveData.observe(viewLifecycleOwner, { operations ->
+            this.operations = operations
+            operations?.let { adapter.setOperations(it) }
+            if (operations.isNotEmpty()) binding!!.textViewPressPlus.visibility = View.GONE
+        })
     }
+
+    override fun onDestroyView() {
+        binding = null
+        super.onDestroyView()
+    }
 
     companion object {
-        fun newInstance(): OperationsFragment {
-            return OperationsFragment()
+        private var INSTANCE: OperationsFragment? = null
+
+        fun getInstance(): OperationsFragment {
+            return if(INSTANCE == null) {
+                INSTANCE = OperationsFragment()
+                INSTANCE!!
+            } else INSTANCE!!
         }
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/eugene_poroshin/money_manager/statistics/StatisticsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.statistics\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.Toolbar\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.eugene_poroshin.money_manager.R\r\nimport com.eugene_poroshin.money_manager.categories.CategoryViewModel\r\nimport com.eugene_poroshin.money_manager.di.App\r\nimport com.eugene_poroshin.money_manager.fragments.OnFragmentActionListener\r\nimport com.eugene_poroshin.money_manager.operations.OperationType\r\nimport com.eugene_poroshin.money_manager.operations.OperationsViewModel\r\nimport com.eugene_poroshin.money_manager.repo.database.Operation\r\nimport com.github.mikephil.charting.charts.PieChart\r\nimport com.github.mikephil.charting.data.PieData\r\nimport com.github.mikephil.charting.data.PieDataSet\r\nimport com.github.mikephil.charting.data.PieEntry\r\nimport java.util.*\r\nimport javax.inject.Inject\r\n\r\nclass StatisticsFragment : Fragment() {\r\n\r\n    @Inject\r\n    lateinit var viewModelCategory: CategoryViewModel\r\n    @Inject\r\n    lateinit var viewModelOperation: OperationsViewModel\r\n\r\n    private var onFragmentActionListener: OnFragmentActionListener? = null\r\n    private var toolbar: Toolbar? = null\r\n    private var pieChart: PieChart? = null\r\n    private var operations: List<Operation> = ArrayList()\r\n    private var categoryNames: List<String> = ArrayList()\r\n\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        if (context is OnFragmentActionListener) {\r\n            onFragmentActionListener = context\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        App.appComponent.fragmentSubComponentBuilder().with(this).build().inject(this)\r\n        super.onCreate(savedInstanceState)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view =\r\n            inflater.inflate(R.layout.fragment_statistics, container, false)\r\n        toolbar = view.findViewById(R.id.my_toolbar)\r\n        (activity as AppCompatActivity?)!!.setSupportActionBar(toolbar)\r\n        setHasOptionsMenu(true)\r\n        pieChart = view.findViewById(R.id.pieChart)\r\n        viewModelOperation.liveData.observe(\r\n            viewLifecycleOwner,\r\n            Observer { operationList ->\r\n                operations = operationList\r\n                viewModelCategory.liveDataCategoryNames.observe(\r\n                    viewLifecycleOwner,\r\n                    Observer { categories ->\r\n                        categoryNames = categories\r\n                        setUpPieChart(operations, categoryNames)\r\n                    })\r\n            })\r\n        return view\r\n    }\r\n\r\n    private fun setUpPieChart(\r\n        operationList: List<Operation>,\r\n        categoryNames: List<String>\r\n    ) {\r\n        val pieEntries: MutableList<PieEntry> = ArrayList()\r\n        for (j in categoryNames.indices) {\r\n            var sum = 0.0\r\n            var label: String? = \"\"\r\n            for (i in operationList.indices) {\r\n                if (operationList[i].operationEntity?.type == OperationType.CONSUMPTION\r\n                ) {\r\n                    if (categoryNames[j] == operationList[i].category?.name) {\r\n                        sum += operationList[i].operationEntity?.sum!!\r\n                        label = operationList[i].category?.name\r\n                    }\r\n                }\r\n            }\r\n            if (sum != 0.0) {\r\n                pieEntries.add(PieEntry(sum.toFloat(), label))\r\n            }\r\n        }\r\n        val dataSet = PieDataSet(pieEntries, \"\")\r\n        dataSet.setColors(*ChartColors.MATERIAL_COLORS)\r\n        dataSet.valueTextColor = R.color.colorPrimaryDark\r\n        dataSet.valueTextSize = 14f\r\n        val data = PieData(dataSet)\r\n        pieChart!!.data = data\r\n        pieChart!!.animateXY(1000, 1000)\r\n        pieChart!!.invalidate()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        onFragmentActionListener = null\r\n    }\r\n\r\n    companion object {\r\n        fun newInstance(): StatisticsFragment {\r\n            return StatisticsFragment()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/statistics/StatisticsFragment.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/statistics/StatisticsFragment.kt	(date 1604323086454)
@@ -1,95 +1,72 @@
 package com.eugene_poroshin.money_manager.statistics
 
-import android.content.Context
 import android.os.Bundle
-import android.view.LayoutInflater
 import android.view.View
-import android.view.ViewGroup
-import androidx.appcompat.app.AppCompatActivity
-import androidx.appcompat.widget.Toolbar
 import androidx.fragment.app.Fragment
-import androidx.lifecycle.Observer
-import androidx.lifecycle.ViewModelProvider
 import com.eugene_poroshin.money_manager.R
 import com.eugene_poroshin.money_manager.categories.CategoryViewModel
+import com.eugene_poroshin.money_manager.databinding.FragmentStatisticsBinding
 import com.eugene_poroshin.money_manager.di.App
-import com.eugene_poroshin.money_manager.fragments.OnFragmentActionListener
 import com.eugene_poroshin.money_manager.operations.OperationType
 import com.eugene_poroshin.money_manager.operations.OperationsViewModel
 import com.eugene_poroshin.money_manager.repo.database.Operation
-import com.github.mikephil.charting.charts.PieChart
 import com.github.mikephil.charting.data.PieData
 import com.github.mikephil.charting.data.PieDataSet
 import com.github.mikephil.charting.data.PieEntry
 import java.util.*
 import javax.inject.Inject
 
-class StatisticsFragment : Fragment() {
+class StatisticsFragment : Fragment(R.layout.fragment_statistics) {
 
     @Inject
     lateinit var viewModelCategory: CategoryViewModel
+
     @Inject
     lateinit var viewModelOperation: OperationsViewModel
 
-    private var onFragmentActionListener: OnFragmentActionListener? = null
-    private var toolbar: Toolbar? = null
-    private var pieChart: PieChart? = null
+    private var binding: FragmentStatisticsBinding? = null
     private var operations: List<Operation> = ArrayList()
     private var categoryNames: List<String> = ArrayList()
 
-    override fun onAttach(context: Context) {
-        super.onAttach(context)
-        if (context is OnFragmentActionListener) {
-            onFragmentActionListener = context
-        }
-    }
-
     override fun onCreate(savedInstanceState: Bundle?) {
         App.appComponent.fragmentSubComponentBuilder().with(this).build().inject(this)
         super.onCreate(savedInstanceState)
     }
 
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        val view =
-            inflater.inflate(R.layout.fragment_statistics, container, false)
-        toolbar = view.findViewById(R.id.my_toolbar)
-        (activity as AppCompatActivity?)!!.setSupportActionBar(toolbar)
-        setHasOptionsMenu(true)
-        pieChart = view.findViewById(R.id.pieChart)
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        binding = FragmentStatisticsBinding.bind(view)
         viewModelOperation.liveData.observe(
             viewLifecycleOwner,
-            Observer { operationList ->
+            { operationList ->
                 operations = operationList
-                viewModelCategory.liveDataCategoryNames.observe(
-                    viewLifecycleOwner,
-                    Observer { categories ->
-                        categoryNames = categories
-                        setUpPieChart(operations, categoryNames)
-                    })
+            })
+        viewModelCategory.liveDataCategoryNames.observe(
+            viewLifecycleOwner,
+            { categories ->
+                categoryNames = categories
+                setUpPieChart(operations, categoryNames)
             })
-        return view
     }
 
     private fun setUpPieChart(
         operationList: List<Operation>,
         categoryNames: List<String>
     ) {
+        //todo kotlin filter - is it ok? \/
+
         val pieEntries: MutableList<PieEntry> = ArrayList()
-        for (j in categoryNames.indices) {
+        categoryNames.forEach { outerLoopCategoryName ->
             var sum = 0.0
             var label: String? = ""
-            for (i in operationList.indices) {
-                if (operationList[i].operationEntity?.type == OperationType.CONSUMPTION
-                ) {
-                    if (categoryNames[j] == operationList[i].category?.name) {
-                        sum += operationList[i].operationEntity?.sum!!
-                        label = operationList[i].category?.name
-                    }
-                }
+
+            val expenseOperationsList =
+                operationList.filter { it.operationEntity?.type == OperationType.EXPENSE }
+            val resultOperationsList =
+                expenseOperationsList.filter { it.category?.name == outerLoopCategoryName }
+            resultOperationsList.forEach {
+                sum += it.operationEntity?.sum!!
+                label = it.category?.name
             }
             if (sum != 0.0) {
                 pieEntries.add(PieEntry(sum.toFloat(), label))
@@ -100,19 +77,25 @@
         dataSet.valueTextColor = R.color.colorPrimaryDark
         dataSet.valueTextSize = 14f
         val data = PieData(dataSet)
-        pieChart!!.data = data
-        pieChart!!.animateXY(1000, 1000)
-        pieChart!!.invalidate()
+        binding?.pieChart?.data = data
+        binding?.pieChart?.animateXY(1000, 1000)
+        binding?.pieChart?.invalidate()
     }
 
-    override fun onDestroy() {
-        super.onDestroy()
-        onFragmentActionListener = null
+    override fun onDestroyView() {
+        binding = null
+        super.onDestroyView()
     }
 
     companion object {
-        fun newInstance(): StatisticsFragment {
-            return StatisticsFragment()
+        private var INSTANCE: StatisticsFragment? = null
+
+        //todo is it ok, or by lazy?
+        fun getInstance(): StatisticsFragment {
+            return if (INSTANCE == null) {
+                INSTANCE = StatisticsFragment()
+                INSTANCE!!
+            } else INSTANCE!!
         }
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/eugene_poroshin/money_manager/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.os.Bundle\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.eugene_poroshin.money_manager.accounts.AccountsFragment\r\nimport com.eugene_poroshin.money_manager.categories.CategoriesFragment\r\nimport com.eugene_poroshin.money_manager.fragments.OnFragmentActionListener\r\nimport com.eugene_poroshin.money_manager.operations.OperationsFragment\r\nimport com.eugene_poroshin.money_manager.statistics.StatisticsFragment\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\n\r\nclass MainActivity : AppCompatActivity(), OnFragmentActionListener {\r\n\r\n    private lateinit var bottomNavigationView: BottomNavigationView\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        sharedPreferences = getPreferences(Context.MODE_PRIVATE)\r\n        val isFirstVisit: Boolean = sharedPreferences.getBoolean(SAVED_STATE, false)\r\n        if (!isFirstVisit) {\r\n            startActivity(Intent(this, StartActivity::class.java))\r\n            true.saveFirstVisit()\r\n        }\r\n        setContentView(R.layout.activity_main)\r\n        onOpenOperationsFragment()\r\n        bottomNavigationView = findViewById(R.id.bottom_navigation_view)\r\n        bottomNavigationView.setOnNavigationItemSelectedListener(BottomNavigationView.OnNavigationItemSelectedListener { item ->\r\n            when (item.itemId) {\r\n                R.id.action_categories -> onOpenCategoriesFragment()\r\n                R.id.action_accounts -> onOpenAccountsFragment()\r\n                R.id.action_operations -> onOpenOperationsFragment()\r\n                R.id.action_statistics -> onOpenStatisticsFragment()\r\n            }\r\n            true\r\n        })\r\n    }\r\n\r\n    private fun Boolean.saveFirstVisit() {\r\n        val editor = sharedPreferences.edit()\r\n        editor.putBoolean(SAVED_STATE, this)\r\n        editor.apply()\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        if (back_pressed + 2000 > System.currentTimeMillis()) {\r\n            super.onBackPressed()\r\n            finish()\r\n        } else {\r\n            Toast.makeText(baseContext, R.string.backPressed_ru,\r\n                    Toast.LENGTH_SHORT).show()\r\n            back_pressed = System.currentTimeMillis()\r\n        }\r\n    }\r\n\r\n    override fun onOpenOperationsFragment() {\r\n        supportFragmentManager\r\n                .beginTransaction()\r\n                .replace(R.id.fragmentContainer, OperationsFragment.newInstance(), OperationsFragment::class.java.simpleName)\r\n                .commit()\r\n    }\r\n\r\n    override fun onOpenAccountsFragment() {\r\n        supportFragmentManager\r\n                .beginTransaction()\r\n                .replace(R.id.fragmentContainer, AccountsFragment.newInstance(), AccountsFragment::class.java.simpleName)\r\n                .commit()\r\n    }\r\n\r\n    override fun onOpenCategoriesFragment() {\r\n        supportFragmentManager\r\n                .beginTransaction()\r\n                .replace(R.id.fragmentContainer, CategoriesFragment.newInstance(), CategoriesFragment::class.java.simpleName)\r\n                .commit()\r\n    }\r\n\r\n    override fun onOpenStatisticsFragment() {\r\n        supportFragmentManager\r\n                .beginTransaction()\r\n                .replace(R.id.fragmentContainer, StatisticsFragment.newInstance(), StatisticsFragment::class.java.simpleName)\r\n                .commit()\r\n    }\r\n\r\n    companion object {\r\n        private var back_pressed: Long = 0\r\n        const val SAVED_STATE = \"SAVED_STATE\"\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/MainActivity.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/MainActivity.kt	(date 1604316174963)
@@ -1,11 +1,11 @@
 package com.eugene_poroshin.money_manager
 
-import android.content.Context
 import android.content.Intent
 import android.content.SharedPreferences
 import android.os.Bundle
 import android.widget.Toast
 import androidx.appcompat.app.AppCompatActivity
+import androidx.fragment.app.Fragment
 import com.eugene_poroshin.money_manager.accounts.AccountsFragment
 import com.eugene_poroshin.money_manager.categories.CategoriesFragment
 import com.eugene_poroshin.money_manager.fragments.OnFragmentActionListener
@@ -15,21 +15,21 @@
 
 class MainActivity : AppCompatActivity(), OnFragmentActionListener {
 
-    private lateinit var bottomNavigationView: BottomNavigationView
-    private lateinit var sharedPreferences: SharedPreferences
+    private var backPressed: Long = 0
+    private val sharedPreferences: SharedPreferences by lazy { getPreferences(MODE_PRIVATE) }
 
     override fun onCreate(savedInstanceState: Bundle?) {
+        //todo splash screen
+        openStartScreenIfNeeded()
         super.onCreate(savedInstanceState)
-        sharedPreferences = getPreferences(Context.MODE_PRIVATE)
-        val isFirstVisit: Boolean = sharedPreferences.getBoolean(SAVED_STATE, false)
-        if (!isFirstVisit) {
-            startActivity(Intent(this, StartActivity::class.java))
-            true.saveFirstVisit()
-        }
         setContentView(R.layout.activity_main)
+        initBottomNavigation()
         onOpenOperationsFragment()
-        bottomNavigationView = findViewById(R.id.bottom_navigation_view)
-        bottomNavigationView.setOnNavigationItemSelectedListener(BottomNavigationView.OnNavigationItemSelectedListener { item ->
+    }
+
+    private fun initBottomNavigation() {
+        val bottomNavigationView: BottomNavigationView = findViewById(R.id.bottom_navigation_view)
+        bottomNavigationView.setOnNavigationItemSelectedListener { item ->
             when (item.itemId) {
                 R.id.action_categories -> onOpenCategoriesFragment()
                 R.id.action_accounts -> onOpenAccountsFragment()
@@ -37,56 +37,56 @@
                 R.id.action_statistics -> onOpenStatisticsFragment()
             }
             true
-        })
+        }
+    }
+
+    private fun openStartScreenIfNeeded() {
+        val isFirstVisit: Boolean = sharedPreferences.getBoolean(SAVED_STATE, false)
+        if (!isFirstVisit) {
+            startActivity(Intent(this, StartActivity::class.java))
+            saveFirstVisit(true)
+        }
+    }
+
+    private fun saveFirstVisit(saveState: Boolean) {
+        sharedPreferences.edit()
+            .putBoolean(SAVED_STATE, saveState)
+            .apply()
     }
 
-    private fun Boolean.saveFirstVisit() {
-        val editor = sharedPreferences.edit()
-        editor.putBoolean(SAVED_STATE, this)
-        editor.apply()
+    private fun openFragmentTab(fragment: Fragment) {
+        supportFragmentManager
+            .beginTransaction()
+            .replace(
+                R.id.fragmentContainer,
+                fragment,
+                fragment::class.java.simpleName
+            )
+            .commit()
     }
+
+    override fun onOpenAccountsFragment() = openFragmentTab(AccountsFragment.getInstance())
+
+    override fun onOpenOperationsFragment() = openFragmentTab(OperationsFragment.getInstance())
+
+    override fun onOpenCategoriesFragment() = openFragmentTab(CategoriesFragment.getInstance())
+
+    override fun onOpenStatisticsFragment() = openFragmentTab(StatisticsFragment.getInstance())
 
     override fun onBackPressed() {
-        if (back_pressed + 2000 > System.currentTimeMillis()) {
+        if (backPressed + 2000 > System.currentTimeMillis()) {
             super.onBackPressed()
             finish()
         } else {
-            Toast.makeText(baseContext, R.string.backPressed_ru,
-                    Toast.LENGTH_SHORT).show()
-            back_pressed = System.currentTimeMillis()
+            Toast.makeText(
+                baseContext, R.string.backPressed_ru,
+                Toast.LENGTH_SHORT
+            ).show()
+            backPressed = System.currentTimeMillis()
         }
     }
-
-    override fun onOpenOperationsFragment() {
-        supportFragmentManager
-                .beginTransaction()
-                .replace(R.id.fragmentContainer, OperationsFragment.newInstance(), OperationsFragment::class.java.simpleName)
-                .commit()
-    }
-
-    override fun onOpenAccountsFragment() {
-        supportFragmentManager
-                .beginTransaction()
-                .replace(R.id.fragmentContainer, AccountsFragment.newInstance(), AccountsFragment::class.java.simpleName)
-                .commit()
-    }
-
-    override fun onOpenCategoriesFragment() {
-        supportFragmentManager
-                .beginTransaction()
-                .replace(R.id.fragmentContainer, CategoriesFragment.newInstance(), CategoriesFragment::class.java.simpleName)
-                .commit()
-    }
-
-    override fun onOpenStatisticsFragment() {
-        supportFragmentManager
-                .beginTransaction()
-                .replace(R.id.fragmentContainer, StatisticsFragment.newInstance(), StatisticsFragment::class.java.simpleName)
-                .commit()
-    }
 
     companion object {
-        private var back_pressed: Long = 0
-        const val SAVED_STATE = "SAVED_STATE"
+        private const val SAVED_STATE = "SAVED_STATE"
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/eugene_poroshin/money_manager/AddOperationActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager\r\n\r\nimport android.os.Bundle\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.EditText\r\nimport android.widget.RadioGroup\r\nimport android.widget.Spinner\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.Toolbar\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.eugene_poroshin.money_manager.accounts.AccountsViewModel\r\nimport com.eugene_poroshin.money_manager.categories.CategoryViewModel\r\nimport com.eugene_poroshin.money_manager.operations.OperationType\r\nimport com.eugene_poroshin.money_manager.operations.OperationsViewModel\r\nimport com.eugene_poroshin.money_manager.repo.database.AccountEntity\r\nimport com.eugene_poroshin.money_manager.repo.database.CategoryEntity\r\nimport com.eugene_poroshin.money_manager.repo.database.OperationEntity\r\nimport java.util.*\r\n\r\nclass AddOperationActivity : AppCompatActivity() {\r\n\r\n    private var toolbar: Toolbar? = null\r\n    private var radioGroup: RadioGroup? = null\r\n    private var editTextSum: EditText? = null\r\n    private var editTextDescription: EditText? = null\r\n    private lateinit var operationEntity: OperationEntity\r\n    private var type: OperationType? = null\r\n    private var spinnerCategories: Spinner? = null\r\n    private var spinnerAccounts: Spinner? = null\r\n    private var adapterCategories: ArrayAdapter<String>? = null\r\n    private var adapterAccounts: ArrayAdapter<String>? = null\r\n    private var categoryNames: List<String> = ArrayList()\r\n    private var accountNames: List<String> = ArrayList()\r\n    private var viewModelCategory: CategoryViewModel? = null\r\n    private var viewModelAccount: AccountsViewModel? = null\r\n    private var viewModelOperation: OperationsViewModel? = null\r\n    private var categories: List<CategoryEntity> = ArrayList()\r\n    private var accounts: List<AccountEntity> = ArrayList()\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_add_operation)\r\n        toolbar = findViewById(R.id.toolbar_add_operation)\r\n        setSupportActionBar(toolbar)\r\n        if (supportActionBar != null) {\r\n            supportActionBar!!.setDisplayHomeAsUpEnabled(true)\r\n            supportActionBar!!.setDisplayShowHomeEnabled(true)\r\n            toolbar?.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp)\r\n        }\r\n        radioGroup = findViewById(R.id.radioGroup)\r\n        editTextSum = findViewById(R.id.editTextBalance)\r\n        editTextDescription = findViewById(R.id.editTextDescription)\r\n        findViewById<View>(R.id.buttonSaveOperation).setOnClickListener { saveOperation() }\r\n        type = OperationType.CONSUMPTION\r\n        radioGroup?.setOnCheckedChangeListener(RadioGroup.OnCheckedChangeListener { group, _ ->\r\n            if (group.checkedRadioButtonId == R.id.radioButtonConsumption) {\r\n                toolbar?.title = \"Расход\"\r\n                type = OperationType.CONSUMPTION\r\n            }\r\n            if (group.checkedRadioButtonId == R.id.radioButtonIncome) {\r\n                toolbar?.title = \"Доход\"\r\n                type = OperationType.INCOME\r\n            }\r\n        })\r\n        spinnerCategories = findViewById(R.id.spinnerCategories)\r\n        spinnerAccounts = findViewById(R.id.spinnerAccounts)\r\n        viewModelCategory = ViewModelProvider(this).get(CategoryViewModel::class.java)\r\n        viewModelCategory!!.liveDataCategoryNames.observe(\r\n            this, Observer { categories ->\r\n                categoryNames = categories\r\n                adapterCategories = ArrayAdapter(\r\n                    baseContext,\r\n                    android.R.layout.simple_spinner_item,\r\n                    categoryNames\r\n                )\r\n                adapterCategories!!.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\r\n                spinnerCategories?.adapter = adapterCategories\r\n                spinnerCategories?.setSelection(0)\r\n            })\r\n        viewModelCategory!!.liveDataCategories.observe(\r\n            this, Observer { categoryEntityList -> categories = categoryEntityList })\r\n        viewModelAccount = ViewModelProvider(this).get(AccountsViewModel::class.java)\r\n        viewModelAccount!!.liveDataAccountNames.observe(\r\n            this,\r\n            Observer { accounts ->\r\n                accountNames = accounts\r\n                adapterAccounts = ArrayAdapter(\r\n                    baseContext,\r\n                    android.R.layout.simple_spinner_item,\r\n                    accountNames\r\n                )\r\n                adapterAccounts!!.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\r\n                spinnerAccounts?.adapter = adapterAccounts\r\n                spinnerAccounts?.setSelection(0)\r\n            })\r\n        viewModelAccount!!.liveDataAccounts.observe(\r\n            this, Observer { accountEntityList -> accounts = accountEntityList })\r\n        viewModelOperation = ViewModelProvider(this).get(OperationsViewModel::class.java)\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.add_operation_menu, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        onBackPressed()\r\n        return true\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == R.id.action_check) {\r\n            saveOperation()\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n\r\n    private fun saveOperation() {\r\n        val categoryId = categories[spinnerCategories!!.selectedItemPosition].id\r\n        val accountId = accounts[spinnerAccounts!!.selectedItemPosition].id\r\n        val date = System.currentTimeMillis()\r\n        val sum: Double = if (editTextSum!!.text.toString().isEmpty()) {\r\n            0.0\r\n        } else {\r\n            editTextSum!!.text.toString().toDouble()\r\n        }\r\n        val description: String = if (editTextDescription!!.text.toString().isEmpty()) {\r\n            \"\"\r\n        } else {\r\n            editTextDescription!!.text.toString()\r\n        }\r\n        operationEntity =\r\n            type?.let { OperationEntity(categoryId, accountId, date, sum, description, it) }!!\r\n        viewModelOperation!!.insert(operationEntity)\r\n        val newSumAccount = accounts[spinnerAccounts!!.selectedItemPosition]\r\n        val currentBalance =\r\n            accounts[spinnerAccounts!!.selectedItemPosition].balance\r\n        if (type == OperationType.CONSUMPTION) {\r\n            newSumAccount.balance = currentBalance - sum\r\n        } else if (type == OperationType.INCOME) {\r\n            newSumAccount.balance = currentBalance + sum\r\n        }\r\n        viewModelAccount!!.update(newSumAccount)\r\n        finish()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/AddOperationActivity.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/AddOperationActivity.kt	(date 1603873798370)
@@ -1,19 +1,13 @@
 package com.eugene_poroshin.money_manager
 
 import android.os.Bundle
-import android.view.Menu
-import android.view.MenuItem
-import android.view.View
 import android.widget.ArrayAdapter
-import android.widget.EditText
-import android.widget.RadioGroup
-import android.widget.Spinner
 import androidx.appcompat.app.AppCompatActivity
-import androidx.appcompat.widget.Toolbar
 import androidx.lifecycle.Observer
 import androidx.lifecycle.ViewModelProvider
 import com.eugene_poroshin.money_manager.accounts.AccountsViewModel
 import com.eugene_poroshin.money_manager.categories.CategoryViewModel
+import com.eugene_poroshin.money_manager.databinding.ActivityAddOperationBinding
 import com.eugene_poroshin.money_manager.operations.OperationType
 import com.eugene_poroshin.money_manager.operations.OperationsViewModel
 import com.eugene_poroshin.money_manager.repo.database.AccountEntity
@@ -23,54 +17,45 @@
 
 class AddOperationActivity : AppCompatActivity() {
 
-    private var toolbar: Toolbar? = null
-    private var radioGroup: RadioGroup? = null
-    private var editTextSum: EditText? = null
-    private var editTextDescription: EditText? = null
+    private lateinit var binding: ActivityAddOperationBinding
+
     private lateinit var operationEntity: OperationEntity
-    private var type: OperationType? = null
-    private var spinnerCategories: Spinner? = null
-    private var spinnerAccounts: Spinner? = null
+    private var type: OperationType = OperationType.EXPENSE
     private var adapterCategories: ArrayAdapter<String>? = null
     private var adapterAccounts: ArrayAdapter<String>? = null
     private var categoryNames: List<String> = ArrayList()
     private var accountNames: List<String> = ArrayList()
-    private var viewModelCategory: CategoryViewModel? = null
-    private var viewModelAccount: AccountsViewModel? = null
+
+    //todo - is it OK by lazy? \/
+    private val viewModelCategory
+            by lazy { ViewModelProvider(this).get(CategoryViewModel::class.java) }
+    private val viewModelAccount
+            by lazy { ViewModelProvider(this).get(AccountsViewModel::class.java) }
     private var viewModelOperation: OperationsViewModel? = null
     private var categories: List<CategoryEntity> = ArrayList()
     private var accounts: List<AccountEntity> = ArrayList()
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_add_operation)
-        toolbar = findViewById(R.id.toolbar_add_operation)
-        setSupportActionBar(toolbar)
-        if (supportActionBar != null) {
-            supportActionBar!!.setDisplayHomeAsUpEnabled(true)
-            supportActionBar!!.setDisplayShowHomeEnabled(true)
-            toolbar?.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp)
-        }
-        radioGroup = findViewById(R.id.radioGroup)
-        editTextSum = findViewById(R.id.editTextBalance)
-        editTextDescription = findViewById(R.id.editTextDescription)
-        findViewById<View>(R.id.buttonSaveOperation).setOnClickListener { saveOperation() }
-        type = OperationType.CONSUMPTION
-        radioGroup?.setOnCheckedChangeListener(RadioGroup.OnCheckedChangeListener { group, _ ->
-            if (group.checkedRadioButtonId == R.id.radioButtonConsumption) {
-                toolbar?.title = "Расход"
-                type = OperationType.CONSUMPTION
-            }
-            if (group.checkedRadioButtonId == R.id.radioButtonIncome) {
-                toolbar?.title = "Доход"
-                type = OperationType.INCOME
+        binding = ActivityAddOperationBinding.inflate(layoutInflater)
+        setContentView(binding.root)
+
+        initToolbar()
+        binding.buttonSaveOperation.setOnClickListener { saveOperation() }
+        binding.radioGroup.setOnCheckedChangeListener { group, _ ->
+            when (group.checkedRadioButtonId) {
+                R.id.radioButtonConsumption -> {
+                    binding.toolbarAddOperation.title = "Расход"
+                    type = OperationType.EXPENSE
+                }
+                R.id.radioButtonIncome -> {
+                    binding.toolbarAddOperation.title = "Доход"
+                    type = OperationType.INCOME
+                }
             }
-        })
-        spinnerCategories = findViewById(R.id.spinnerCategories)
-        spinnerAccounts = findViewById(R.id.spinnerAccounts)
-        viewModelCategory = ViewModelProvider(this).get(CategoryViewModel::class.java)
-        viewModelCategory!!.liveDataCategoryNames.observe(
-            this, Observer { categories ->
+        }
+        viewModelCategory.liveDataCategoryNames.observe(
+            this, { categories ->
                 categoryNames = categories
                 adapterCategories = ArrayAdapter(
                     baseContext,
@@ -78,15 +63,14 @@
                     categoryNames
                 )
                 adapterCategories!!.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
-                spinnerCategories?.adapter = adapterCategories
-                spinnerCategories?.setSelection(0)
+                binding.spinnerCategories.adapter = adapterCategories
+                binding.spinnerCategories.setSelection(0)
             })
-        viewModelCategory!!.liveDataCategories.observe(
-            this, Observer { categoryEntityList -> categories = categoryEntityList })
-        viewModelAccount = ViewModelProvider(this).get(AccountsViewModel::class.java)
-        viewModelAccount!!.liveDataAccountNames.observe(
+        viewModelCategory.liveDataCategories.observe(
+            this, { categoryEntityList -> categories = categoryEntityList })
+        viewModelAccount.liveDataAccountNames.observe(
             this,
-            Observer { accounts ->
+            { accounts ->
                 accountNames = accounts
                 adapterAccounts = ArrayAdapter(
                     baseContext,
@@ -94,58 +78,42 @@
                     accountNames
                 )
                 adapterAccounts!!.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
-                spinnerAccounts?.adapter = adapterAccounts
-                spinnerAccounts?.setSelection(0)
+                binding.spinnerAccounts.adapter = adapterAccounts
+                binding.spinnerAccounts.setSelection(0)
             })
-        viewModelAccount!!.liveDataAccounts.observe(
-            this, Observer { accountEntityList -> accounts = accountEntityList })
+        viewModelAccount.liveDataAccounts.observe(
+            this, { accountEntityList -> accounts = accountEntityList })
         viewModelOperation = ViewModelProvider(this).get(OperationsViewModel::class.java)
     }
+    //todo liveDataCategories and liveDataCategoryNames, -//- AccountNames and accounts?
 
-    override fun onCreateOptionsMenu(menu: Menu): Boolean {
-        menuInflater.inflate(R.menu.add_operation_menu, menu)
-        return true
-    }
-
-    override fun onSupportNavigateUp(): Boolean {
-        onBackPressed()
-        return true
-    }
-
-    override fun onOptionsItemSelected(item: MenuItem): Boolean {
-        if (item.itemId == R.id.action_check) {
-            saveOperation()
-            return true
+    private fun initToolbar() {
+        binding.toolbarAddOperation.inflateMenu(R.menu.add_operation_menu)
+        binding.toolbarAddOperation.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp)
+        binding.toolbarAddOperation.setNavigationOnClickListener { onBackPressed() }
+        binding.toolbarAddOperation.setOnMenuItemClickListener {
+            when (it.itemId) {
+                R.id.action_check -> saveOperation()
+            }
+            true
         }
-        return super.onOptionsItemSelected(item)
     }
 
     private fun saveOperation() {
-        val categoryId = categories[spinnerCategories!!.selectedItemPosition].id
-        val accountId = accounts[spinnerAccounts!!.selectedItemPosition].id
+        val categoryId = categories[binding.spinnerCategories.selectedItemPosition].id
+        val accountId = accounts[binding.spinnerAccounts.selectedItemPosition].id
         val date = System.currentTimeMillis()
-        val sum: Double = if (editTextSum!!.text.toString().isEmpty()) {
-            0.0
-        } else {
-            editTextSum!!.text.toString().toDouble()
-        }
-        val description: String = if (editTextDescription!!.text.toString().isEmpty()) {
-            ""
-        } else {
-            editTextDescription!!.text.toString()
-        }
-        operationEntity =
-            type?.let { OperationEntity(categoryId, accountId, date, sum, description, it) }!!
+        val sum: Double = binding.editTextBalance.text.toString().toDoubleOrNull() ?: 0.0
+        val description: String = binding.editTextDescription.text?.toString().orEmpty()
+        operationEntity = OperationEntity(categoryId, accountId, date, sum, description, type)
         viewModelOperation!!.insert(operationEntity)
-        val newSumAccount = accounts[spinnerAccounts!!.selectedItemPosition]
-        val currentBalance =
-            accounts[spinnerAccounts!!.selectedItemPosition].balance
-        if (type == OperationType.CONSUMPTION) {
-            newSumAccount.balance = currentBalance - sum
-        } else if (type == OperationType.INCOME) {
-            newSumAccount.balance = currentBalance + sum
+        val newSumAccount = accounts[binding.spinnerAccounts.selectedItemPosition]
+        val currentBalance = accounts[binding.spinnerAccounts.selectedItemPosition].balance
+        when (type) {
+            OperationType.EXPENSE -> newSumAccount.balance = currentBalance - sum
+            OperationType.INCOME -> newSumAccount.balance = currentBalance + sum
         }
-        viewModelAccount!!.update(newSumAccount)
+        viewModelAccount.update(newSumAccount)
         finish()
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/eugene_poroshin/money_manager/repo/Repository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.repo\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport com.eugene_poroshin.money_manager.repo.database.*\r\n\r\nabstract class Repository {\r\n\r\n    class CategoryRepository(private val categoryDao: CategoryDao) {\r\n\r\n        val allCategories: LiveData<List<CategoryEntity>> = categoryDao.allCategories()\r\n        val categoryNames: LiveData<List<String>> = categoryDao.categoryNames()\r\n\r\n        suspend fun insert(category: CategoryEntity) {\r\n            categoryDao.insert(category)\r\n        }\r\n\r\n        suspend fun delete(category: CategoryEntity) {\r\n            categoryDao.delete(category)\r\n        }\r\n\r\n        suspend fun update(category: CategoryEntity) {\r\n            categoryDao.update(category)\r\n        }\r\n    }\r\n\r\n    class AccountRepository(private val accountDao: AccountDao) {\r\n\r\n        val allAccounts: LiveData<List<AccountEntity>> = accountDao.allAccounts()\r\n        val accountNames: LiveData<List<String>> = accountDao.accountNames()\r\n\r\n        suspend fun insert(accounts: AccountEntity) {\r\n            accountDao.insert(accounts)\r\n        }\r\n\r\n        suspend fun delete(accounts: AccountEntity) {\r\n            accountDao.delete(accounts)\r\n        }\r\n\r\n        suspend fun update(accounts: AccountEntity) {\r\n            accountDao.update(accounts)\r\n        }\r\n    }\r\n\r\n    class OperationRepository(private val operationDao: OperationDao) {\r\n\r\n        val allOperations: LiveData<List<Operation>> = operationDao.getAllOperations()\r\n\r\n        suspend fun insert(operations: OperationEntity) {\r\n            operationDao.insert(operations)\r\n        }\r\n\r\n        suspend fun delete(operations: OperationEntity) {\r\n            operationDao.delete(operations)\r\n        }\r\n\r\n        suspend fun update(operations: OperationEntity) {\r\n            operationDao.update(operations)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/repo/Repository.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/repo/Repository.kt	(date 1603277426813)
@@ -5,8 +5,10 @@
 
 abstract class Repository {
 
+
     class CategoryRepository(private val categoryDao: CategoryDao) {
 
+        //todo use KotlinFlow instead LiveData (Room doc)
         val allCategories: LiveData<List<CategoryEntity>> = categoryDao.allCategories()
         val categoryNames: LiveData<List<String>> = categoryDao.categoryNames()
 
Index: app/src/main/java/com/eugene_poroshin/money_manager/repo/database/AccountDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.repo.database\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.room.*\r\n\r\n@Dao\r\ninterface AccountDao {\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insert(account: AccountEntity)\r\n\r\n    @Update(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun update(account: AccountEntity)\r\n\r\n    @Delete\r\n    suspend fun delete(account: AccountEntity)\r\n\r\n    @Query(\"SELECT * FROM accounts\")\r\n    fun allAccounts(): LiveData<List<AccountEntity>>\r\n\r\n    @Query(\"SELECT account_name FROM accounts\")\r\n    fun accountNames(): LiveData<List<String>>\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/repo/database/AccountDao.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/repo/database/AccountDao.kt	(date 1603373743338)
@@ -1,5 +1,6 @@
 package com.eugene_poroshin.money_manager.repo.database
 
+import android.util.Log
 import androidx.lifecycle.LiveData
 import androidx.room.*
 
Index: app/src/main/java/com/eugene_poroshin/money_manager/accounts/AccountsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.accounts\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.Toolbar\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.eugene_poroshin.money_manager.AddAccountActivity\r\nimport com.eugene_poroshin.money_manager.EditAccountActivity\r\nimport com.eugene_poroshin.money_manager.R\r\nimport com.eugene_poroshin.money_manager.di.App\r\nimport com.eugene_poroshin.money_manager.fragments.FragmentCommunicator\r\nimport com.eugene_poroshin.money_manager.repo.database.AccountEntity\r\nimport java.io.Serializable\r\nimport java.util.*\r\nimport javax.inject.Inject\r\n\r\nclass AccountsFragment : Fragment() {\r\n\r\n    @Inject\r\n    lateinit var viewModel: AccountsViewModel\r\n\r\n    private var toolbar: Toolbar? = null\r\n    private var recyclerView: RecyclerView? = null\r\n    private var adapter: AccountsAdapter? = null\r\n    private var accounts: List<AccountEntity> = ArrayList()\r\n    private val communicator = object : FragmentCommunicator {\r\n        override fun onItemClickListener(categoryName: String?) {}\r\n        override fun onItemAccountClickListener(accountEntity: AccountEntity?) {\r\n            val intent = Intent(requireActivity(), EditAccountActivity::class.java)\r\n            intent.putExtra(AccountEntity::class.java.simpleName, accountEntity as Serializable)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        App.appComponent.fragmentSubComponentBuilder().with(this).build().inject(this)\r\n        super.onCreate(savedInstanceState)\r\n    }\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view = inflater.inflate(R.layout.fragment_accounts, container, false)\r\n        toolbar = view.findViewById(R.id.my_toolbar)\r\n        (activity as AppCompatActivity?)!!.setSupportActionBar(toolbar)\r\n        setHasOptionsMenu(true)\r\n        recyclerView = view.findViewById(R.id.recycler_view_accounts)\r\n        return view\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n        inflater.inflate(R.menu.accounts_menu, menu)\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == R.id.action_add) {\r\n            val intent = Intent(requireActivity(), AddAccountActivity::class.java)\r\n            startActivity(intent)\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        adapter = AccountsAdapter(accounts, communicator)\r\n        recyclerView!!.layoutManager = LinearLayoutManager(activity)\r\n        recyclerView!!.adapter = adapter\r\n        viewModel.liveDataAccounts.observe(viewLifecycleOwner, Observer { accountEntities ->\r\n                accounts = accountEntities\r\n                adapter!!.setAccounts(accounts)\r\n                toolbar!!.title = \"Баланс: \" + getBalance(accounts) + \" BYN\"\r\n            })\r\n    }\r\n\r\n    private fun getBalance(accounts: List<AccountEntity>): Double {\r\n        var sum = 0.0\r\n        for (accountEntity in accounts) {\r\n            sum += accountEntity.balance\r\n        }\r\n        return sum\r\n    }\r\n\r\n    companion object {\r\n        fun newInstance(): AccountsFragment {\r\n            return AccountsFragment()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/accounts/AccountsFragment.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/accounts/AccountsFragment.kt	(date 1604323086436)
@@ -2,38 +2,34 @@
 
 import android.content.Intent
 import android.os.Bundle
-import android.view.*
-import androidx.appcompat.app.AppCompatActivity
-import androidx.appcompat.widget.Toolbar
+import android.os.Parcelable
+import android.view.View
 import androidx.fragment.app.Fragment
-import androidx.lifecycle.Observer
-import androidx.lifecycle.ViewModelProvider
 import androidx.recyclerview.widget.LinearLayoutManager
-import androidx.recyclerview.widget.RecyclerView
 import com.eugene_poroshin.money_manager.AddAccountActivity
 import com.eugene_poroshin.money_manager.EditAccountActivity
 import com.eugene_poroshin.money_manager.R
+import com.eugene_poroshin.money_manager.databinding.FragmentAccountsBinding
 import com.eugene_poroshin.money_manager.di.App
 import com.eugene_poroshin.money_manager.fragments.FragmentCommunicator
 import com.eugene_poroshin.money_manager.repo.database.AccountEntity
-import java.io.Serializable
 import java.util.*
 import javax.inject.Inject
 
-class AccountsFragment : Fragment() {
+class AccountsFragment : Fragment(R.layout.fragment_accounts) {
+
+    private var binding: FragmentAccountsBinding? = null
 
     @Inject
     lateinit var viewModel: AccountsViewModel
 
-    private var toolbar: Toolbar? = null
-    private var recyclerView: RecyclerView? = null
     private var adapter: AccountsAdapter? = null
     private var accounts: List<AccountEntity> = ArrayList()
     private val communicator = object : FragmentCommunicator {
         override fun onItemClickListener(categoryName: String?) {}
         override fun onItemAccountClickListener(accountEntity: AccountEntity?) {
             val intent = Intent(requireActivity(), EditAccountActivity::class.java)
-            intent.putExtra(AccountEntity::class.java.simpleName, accountEntity as Serializable)
+            intent.putExtra(ACCOUNT_ENTITY_PARCELABLE_KEY, accountEntity as Parcelable)
             startActivity(intent)
         }
     }
@@ -43,52 +39,58 @@
         super.onCreate(savedInstanceState)
     }
 
-    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
-        val view = inflater.inflate(R.layout.fragment_accounts, container, false)
-        toolbar = view.findViewById(R.id.my_toolbar)
-        (activity as AppCompatActivity?)!!.setSupportActionBar(toolbar)
-        setHasOptionsMenu(true)
-        recyclerView = view.findViewById(R.id.recycler_view_accounts)
-        return view
-    }
-
-    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
-        super.onCreateOptionsMenu(menu, inflater)
-        inflater.inflate(R.menu.accounts_menu, menu)
-    }
-
-    override fun onOptionsItemSelected(item: MenuItem): Boolean {
-        if (item.itemId == R.id.action_add) {
-            val intent = Intent(requireActivity(), AddAccountActivity::class.java)
-            startActivity(intent)
-            return true
-        }
-        return super.onOptionsItemSelected(item)
-    }
-
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
+        binding = FragmentAccountsBinding.bind(view)
+        initToolbar()
         adapter = AccountsAdapter(accounts, communicator)
-        recyclerView!!.layoutManager = LinearLayoutManager(activity)
-        recyclerView!!.adapter = adapter
-        viewModel.liveDataAccounts.observe(viewLifecycleOwner, Observer { accountEntities ->
-                accounts = accountEntities
-                adapter!!.setAccounts(accounts)
-                toolbar!!.title = "Баланс: " + getBalance(accounts) + " BYN"
-            })
+        binding!!.recyclerViewAccounts.layoutManager = LinearLayoutManager(activity)
+        binding!!.recyclerViewAccounts.adapter = adapter
+        viewModel.liveDataAccounts.observe(viewLifecycleOwner, { accountEntities ->
+            accounts = accountEntities
+            adapter!!.setAccounts(accounts)
+            binding!!.myToolbar.title = "Баланс: " + getBalance(accounts) + " BYN"
+        })
     }
+
+    private fun initToolbar() {
+        binding!!.myToolbar.inflateMenu(R.menu.accounts_menu)
+        binding!!.myToolbar.setOnMenuItemClickListener {
+            when (it.itemId) {
+                R.id.action_add -> startActivity(
+                    Intent(
+                        requireActivity(),
+                        AddAccountActivity::class.java
+                    )
+                )
+            }
+            true
+        }
+    }
 
     private fun getBalance(accounts: List<AccountEntity>): Double {
         var sum = 0.0
-        for (accountEntity in accounts) {
+        accounts.forEach { accountEntity ->
             sum += accountEntity.balance
         }
         return sum
     }
 
+    override fun onDestroyView() {
+        binding = null
+        super.onDestroyView()
+    }
+
     companion object {
-        fun newInstance(): AccountsFragment {
-            return AccountsFragment()
+
+        const val ACCOUNT_ENTITY_PARCELABLE_KEY = "ACCOUNT_ENTITY_PARCELABLE_KEY"
+        private var INSTANCE: AccountsFragment? = null
+
+        fun getInstance(): AccountsFragment {
+            return if (INSTANCE == null) {
+                INSTANCE = AccountsFragment()
+                INSTANCE!!
+            } else INSTANCE!!
         }
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/eugene_poroshin/money_manager/operations/OperationType.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.operations\r\n\r\nenum class OperationType(private val text: String) {\r\n    INCOME(\"INCOME\"),\r\n    CONSUMPTION(\"CONSUMPTION\");\r\n\r\n    override fun toString(): String {\r\n        return text\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/operations/OperationType.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/operations/OperationType.kt	(date 1603869907713)
@@ -1,11 +1,6 @@
 package com.eugene_poroshin.money_manager.operations
 
-enum class OperationType(private val text: String) {
-    INCOME("INCOME"),
-    CONSUMPTION("CONSUMPTION");
-
-    override fun toString(): String {
-        return text
-    }
-
+enum class OperationType {
+    INCOME,
+    EXPENSE;
 }
\ No newline at end of file
Index: app/src/main/java/com/eugene_poroshin/money_manager/operations/OperationsAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.operations\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.eugene_poroshin.money_manager.R\r\nimport com.eugene_poroshin.money_manager.fragments.FragmentCommunicator\r\nimport com.eugene_poroshin.money_manager.repo.database.Operation\r\nimport java.util.*\r\n\r\nclass OperationsAdapter(\r\n    operationList: List<Operation>,\r\n    communication: FragmentCommunicator\r\n) : RecyclerView.Adapter<OperationsAdapter.RecyclerViewHolder>() {\r\n\r\n    private var operations: List<Operation>?\r\n    private val communicator: FragmentCommunicator\r\n    override fun onCreateViewHolder(\r\n        parent: ViewGroup,\r\n        viewType: Int\r\n    ): RecyclerViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r\n            .inflate(R.layout.operation_list_item, parent, false)\r\n        return RecyclerViewHolder(\r\n            view,\r\n            communicator\r\n        )\r\n    }\r\n\r\n    override fun onBindViewHolder(\r\n        holder: RecyclerViewHolder,\r\n        position: Int\r\n    ) {\r\n        when (operations!![position].category?.id) {\r\n            1 -> holder.imageViewIcon.setImageResource(R.drawable.group_18)\r\n            2 -> holder.imageViewIcon.setImageResource(R.drawable.group_19)\r\n            3 -> holder.imageViewIcon.setImageResource(R.drawable.group_20)\r\n            4 -> holder.imageViewIcon.setImageResource(R.drawable.group_21)\r\n            5 -> holder.imageViewIcon.setImageResource(R.drawable.group_22)\r\n            6 -> holder.imageViewIcon.setImageResource(R.drawable.group_23)\r\n            7 -> holder.imageViewIcon.setImageResource(R.drawable.group_24)\r\n            8 -> holder.imageViewIcon.setImageResource(R.drawable.group_25)\r\n            9 -> holder.imageViewIcon.setImageResource(R.drawable.group_29)\r\n            else -> holder.imageViewIcon.setImageResource(R.drawable.group_26)\r\n        }\r\n        holder.textViewName.text = operations!![position].category?.name\r\n        holder.textViewAccount.text = operations!![position].account?.name\r\n        holder.textViewCurrency.text = operations!![position].account?.currency\r\n        holder.textViewSum.text = operations!![position].operationEntity?.sum.toString()\r\n        if (operations!![position].operationEntity\r\n                ?.type == OperationType.CONSUMPTION\r\n        ) {\r\n            holder.textViewSum.setTextColor(\r\n                ContextCompat.getColor(\r\n                    holder.textViewSum.context,\r\n                    R.color.operation_consumption\r\n                )\r\n            )\r\n            holder.textViewCurrency.setTextColor(\r\n                ContextCompat.getColor(\r\n                    holder.textViewCurrency.context,\r\n                    R.color.operation_consumption\r\n                )\r\n            )\r\n        } else if (operations!![position].operationEntity?.type == OperationType.INCOME) {\r\n            holder.textViewSum.setTextColor(\r\n                ContextCompat.getColor(\r\n                    holder.textViewSum.context,\r\n                    R.color.operation_income\r\n                )\r\n            )\r\n            holder.textViewCurrency.setTextColor(\r\n                ContextCompat.getColor(\r\n                    holder.textViewCurrency.context,\r\n                    R.color.operation_income\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return if (operations != null) {\r\n            operations!!.size\r\n        } else 0\r\n    }\r\n\r\n    fun setOperations(operationList: List<Operation>?) {\r\n        operations = operationList\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n    inner class RecyclerViewHolder(\r\n        itemView: View,\r\n        mCommunicator: FragmentCommunicator\r\n    ) : RecyclerView.ViewHolder(itemView) {\r\n        val imageViewIcon: ImageView = itemView.findViewById(R.id.itemOperationImageViewIcon)\r\n        val textViewName: TextView = itemView.findViewById(R.id.itemOperationTextViewName)\r\n        val textViewAccount: TextView = itemView.findViewById(R.id.itemOperationTextViewAccount)\r\n        val textViewSum: TextView = itemView.findViewById(R.id.itemOperationTextViewSum)\r\n        val textViewCurrency: TextView = itemView.findViewById(R.id.itemOperationTextViewCurrency)\r\n        private val mCommunication: FragmentCommunicator = mCommunicator\r\n\r\n        init {\r\n            itemView.setOnClickListener {\r\n                val position = adapterPosition\r\n                val text = operations!![position].category?.name\r\n                mCommunication.onItemClickListener(text)\r\n            }\r\n        }\r\n    }\r\n\r\n    init {\r\n        operations = ArrayList(operationList)\r\n        communicator = communication\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/operations/OperationsAdapter.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/operations/OperationsAdapter.kt	(date 1603869907697)
@@ -52,7 +52,7 @@
         holder.textViewCurrency.text = operations!![position].account?.currency
         holder.textViewSum.text = operations!![position].operationEntity?.sum.toString()
         if (operations!![position].operationEntity
-                ?.type == OperationType.CONSUMPTION
+                ?.type == OperationType.EXPENSE
         ) {
             holder.textViewSum.setTextColor(
                 ContextCompat.getColor(
Index: app/src/main/java/com/eugene_poroshin/money_manager/operations/OperationTypeConverter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.operations\r\n\r\nimport androidx.room.TypeConverter\r\n\r\nobject OperationTypeConverter {\r\n    @JvmStatic\r\n    @TypeConverter\r\n    fun fromTypeToString(type: OperationType?): String? {\r\n        return type?.toString()\r\n    }\r\n\r\n    @JvmStatic\r\n    @TypeConverter\r\n    fun fromStringToType(type: String): OperationType {\r\n        return when (type) {\r\n            OperationType.CONSUMPTION.toString() -> OperationType.CONSUMPTION\r\n            OperationType.INCOME.toString() -> OperationType.INCOME\r\n            else -> throw IllegalArgumentException(\"Could not recognize type\")\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/operations/OperationTypeConverter.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/operations/OperationTypeConverter.kt	(date 1603869907722)
@@ -2,20 +2,19 @@
 
 import androidx.room.TypeConverter
 
-object OperationTypeConverter {
-    @JvmStatic
+class OperationTypeConverter {
+
     @TypeConverter
-    fun fromTypeToString(type: OperationType?): String? {
-        return type?.toString()
-    }
+    fun fromTypeToString(type: OperationType?): String? = type?.converterName
 
-    @JvmStatic
     @TypeConverter
-    fun fromStringToType(type: String): OperationType {
-        return when (type) {
-            OperationType.CONSUMPTION.toString() -> OperationType.CONSUMPTION
-            OperationType.INCOME.toString() -> OperationType.INCOME
-            else -> throw IllegalArgumentException("Could not recognize type")
-        }
-    }
-}
\ No newline at end of file
+    fun fromStringToType(stringType: String?): OperationType? =
+        OperationType.values().firstOrNull { type -> type.converterName == stringType }
+}
+
+private val OperationType.converterName: String
+    get() =
+        when (this) {
+            OperationType.EXPENSE -> "CONSUMPTION"
+            OperationType.INCOME -> "INCOME"
+        }
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\n\r\nbuildscript {\r\n    ext.kotlin_version = '1.3.72'\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        \r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:4.0.1'\r\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\r\n\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        \r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ build.gradle	(date 1603025527342)
@@ -1,14 +1,14 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
 
 buildscript {
-    ext.kotlin_version = '1.3.72'
+    ext.kotlin_version = '1.4.10'
     repositories {
         google()
         jcenter()
         
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:4.0.1'
+        classpath 'com.android.tools.build:gradle:4.1.0'
         classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
 
         // NOTE: Do not place your application dependencies here; they belong
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ .idea/misc.xml	(date 1602582490669)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'kotlin-android'\r\napply plugin: 'kotlin-android-extensions'\r\napply plugin: 'kotlin-kapt'\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n    buildToolsVersion \"29.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.eugene_poroshin.money_manager\"\r\n        minSdkVersion 16\r\n        targetSdkVersion 29\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    packagingOptions {\r\n        exclude 'META-INF/atomicfu.kotlin_module'\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n}\r\n\r\ntasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {\r\n    kotlinOptions {\r\n        jvmTarget = \"1.8\"\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n\r\n    // Kotlin components\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\r\n    api \"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7\"\r\n    api \"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.7\"\r\n\r\n    implementation 'androidx.core:core-ktx:1.3.0'\r\n    implementation 'androidx.preference:preference:1.1.1'\r\n\r\n    // Testing\r\n    testImplementation 'junit:junit:4.13'\r\n    androidTestImplementation \"androidx.arch.core:core-testing:2.1.0\"\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\r\n\r\n    //Networking\r\n    implementation(\"com.squareup.okhttp3:okhttp:4.7.2\")\r\n    implementation(\"io.coil-kt:coil:0.11.0\")\r\n\r\n    // UI\r\n    implementation \"com.google.android.material:material:1.1.0\"\r\n    implementation 'androidx.recyclerview:recyclerview:1.1.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\r\n    implementation 'androidx.appcompat:appcompat:1.1.0'\r\n    implementation 'android.arch.navigation:navigation-ui:1.0.0'\r\n    implementation 'com.android.support:design:29.0.0'\r\n    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'\r\n\r\n    // Room components\r\n    implementation \"androidx.room:room-ktx:2.2.5\"\r\n    implementation \"androidx.room:room-runtime:2.2.5\"\r\n    kapt \"androidx.room:room-compiler:2.2.5\"\r\n    annotationProcessor \"androidx.room:room-compiler:2.2.5\"\r\n    androidTestImplementation \"androidx.room:room-testing:2.2.5\"\r\n\r\n    // Lifecycle components\r\n    implementation \"androidx.lifecycle:lifecycle-extensions:2.2.0\"\r\n    implementation \"androidx.lifecycle:lifecycle-runtime-ktx:2.3.0-alpha05\"\r\n    //noinspection LifecycleAnnotationProcessorWithJava8\r\n    kapt \"androidx.lifecycle:lifecycle-compiler:2.2.0\"\r\n    //noinspection LifecycleAnnotationProcessorWithJava8\r\n    annotationProcessor \"androidx.lifecycle:lifecycle-compiler:2.2.0\"\r\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0\"\r\n\r\n    //Dagger\r\n    api 'com.google.dagger:dagger:2.27'\r\n    kapt 'com.google.dagger:dagger-compiler:2.27'\r\n    //Dagger-Android\r\n    api 'com.google.dagger:dagger-android:2.16'\r\n    api 'com.google.dagger:dagger-android-support:2.16'\r\n    annotationProcessor 'com.google.dagger:dagger-android-processor:2.16'\r\n    //support библиотека\r\n    implementation 'com.google.dagger:dagger-android-support:2.16'\r\n\r\n}\r\nrepositories {\r\n    maven { url 'https://jitpack.io' }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/build.gradle	(date 1604052499186)
@@ -4,17 +4,19 @@
 apply plugin: 'kotlin-kapt'
 
 android {
-    compileSdkVersion 29
-    buildToolsVersion "29.0.3"
+    compileSdkVersion 30
+    buildToolsVersion "30.0.2"
 
     defaultConfig {
         applicationId "com.eugene_poroshin.money_manager"
-        minSdkVersion 16
-        targetSdkVersion 29
+        minSdkVersion 21
+        targetSdkVersion 30
         versionCode 1
         versionName "1.0"
+    }
 
-        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+    buildFeatures {
+        viewBinding true
     }
 
     buildTypes {
@@ -41,33 +43,25 @@
 }
 
 dependencies {
-    implementation fileTree(dir: 'libs', include: ['*.jar'])
-
     // Kotlin components
     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
-    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7"
-    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.7"
+    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"
+    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9"
 
-    implementation 'androidx.core:core-ktx:1.3.0'
+    implementation 'androidx.core:core-ktx:1.3.2'
     implementation 'androidx.preference:preference:1.1.1'
 
-    // Testing
-    testImplementation 'junit:junit:4.13'
-    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
-    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
-    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
-
     //Networking
-    implementation("com.squareup.okhttp3:okhttp:4.7.2")
-    implementation("io.coil-kt:coil:0.11.0")
+    implementation('com.squareup.okhttp3:okhttp:4.9.0')
+    implementation('io.coil-kt:coil:0.13.0')
 
     // UI
-    implementation "com.google.android.material:material:1.1.0"
+    implementation 'com.google.android.material:material:1.2.1'
     implementation 'androidx.recyclerview:recyclerview:1.1.0'
-    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
-    implementation 'androidx.appcompat:appcompat:1.1.0'
+    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
+    implementation 'androidx.appcompat:appcompat:1.2.0'
     implementation 'android.arch.navigation:navigation-ui:1.0.0'
-    implementation 'com.android.support:design:29.0.0'
+    implementation 'com.android.support:design:30.0.0'
     implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
 
     // Room components
@@ -75,11 +69,10 @@
     implementation "androidx.room:room-runtime:2.2.5"
     kapt "androidx.room:room-compiler:2.2.5"
     annotationProcessor "androidx.room:room-compiler:2.2.5"
-    androidTestImplementation "androidx.room:room-testing:2.2.5"
 
     // Lifecycle components
     implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
-    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.0-alpha05"
+    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.0-beta01'
     //noinspection LifecycleAnnotationProcessorWithJava8
     kapt "androidx.lifecycle:lifecycle-compiler:2.2.0"
     //noinspection LifecycleAnnotationProcessorWithJava8
@@ -87,16 +80,20 @@
     implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
 
     //Dagger
-    api 'com.google.dagger:dagger:2.27'
-    kapt 'com.google.dagger:dagger-compiler:2.27'
-    //Dagger-Android
-    api 'com.google.dagger:dagger-android:2.16'
-    api 'com.google.dagger:dagger-android-support:2.16'
-    annotationProcessor 'com.google.dagger:dagger-android-processor:2.16'
+    api 'com.google.dagger:dagger:2.29.1'
+    kapt 'com.google.dagger:dagger-compiler:2.29.1'
+    //Dagger-Android - лучше убрать
+    api 'com.google.dagger:dagger-android:2.29.1'
+    api 'com.google.dagger:dagger-android-support:2.29.1'
+    annotationProcessor 'com.google.dagger:dagger-android-processor:2.29.1'
     //support библиотека
-    implementation 'com.google.dagger:dagger-android-support:2.16'
+    implementation 'com.google.dagger:dagger-android-support:2.29.1'
 
+    //FragmentResultListener
+    implementation 'androidx.fragment:fragment-ktx:1.3.0-beta01'
 }
+
+//в root gradle
 repositories {
     maven { url 'https://jitpack.io' }
 }
Index: app/src/main/java/com/eugene_poroshin/money_manager/AddAccountActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager\r\n\r\nimport android.os.Bundle\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.EditText\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.Toolbar\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.eugene_poroshin.money_manager.accounts.AccountsViewModel\r\nimport com.eugene_poroshin.money_manager.repo.database.AccountEntity\r\n\r\nclass AddAccountActivity : AppCompatActivity() {\r\n\r\n    private var toolbar: Toolbar? = null\r\n    private var editTextAccountName: EditText? = null\r\n    private var editTextBalance: EditText? = null\r\n    private var editTextCurrency: EditText? = null\r\n    private lateinit var accountEntity: AccountEntity\r\n    private var viewModelAccount: AccountsViewModel? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_add_account)\r\n        toolbar = findViewById(R.id.toolbar_add_account)\r\n        setSupportActionBar(toolbar)\r\n        if (supportActionBar != null) {\r\n            supportActionBar!!.setDisplayHomeAsUpEnabled(true)\r\n            supportActionBar!!.setDisplayShowHomeEnabled(true)\r\n            toolbar?.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp)\r\n        }\r\n        editTextAccountName = findViewById(R.id.editTextAccountName)\r\n        editTextBalance = findViewById(R.id.editTextBalance)\r\n        editTextCurrency = findViewById(R.id.editTextCurrency)\r\n        findViewById<View>(R.id.buttonSaveAccount).setOnClickListener { saveAccount() }\r\n        viewModelAccount = ViewModelProvider(this).get(AccountsViewModel::class.java)\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.add_account_menu, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        onBackPressed()\r\n        return true\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == R.id.action_check_account) {\r\n            saveAccount()\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n\r\n    private fun saveAccount() {\r\n        val name: String = if (editTextAccountName!!.text.toString().isEmpty()) {\r\n            \"\"\r\n        } else {\r\n            editTextAccountName!!.text.toString()\r\n        }\r\n        val balance: Double = if (editTextBalance!!.text.toString().isEmpty()) {\r\n            0.0\r\n        } else {\r\n            editTextBalance!!.text.toString().toDouble()\r\n        }\r\n        val currency: String = if (editTextCurrency!!.text.toString().isEmpty()) {\r\n            \"\"\r\n        } else {\r\n            editTextCurrency!!.text.toString()\r\n        }\r\n        accountEntity = AccountEntity(name, balance, currency)\r\n        viewModelAccount!!.insert(accountEntity)\r\n        finish()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/AddAccountActivity.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/AddAccountActivity.kt	(date 1603879781716)
@@ -1,77 +1,49 @@
 package com.eugene_poroshin.money_manager
 
 import android.os.Bundle
-import android.view.Menu
-import android.view.MenuItem
-import android.view.View
-import android.widget.EditText
+import android.util.Log
 import androidx.appcompat.app.AppCompatActivity
-import androidx.appcompat.widget.Toolbar
 import androidx.lifecycle.ViewModelProvider
 import com.eugene_poroshin.money_manager.accounts.AccountsViewModel
+import com.eugene_poroshin.money_manager.databinding.ActivityAddAccountBinding
 import com.eugene_poroshin.money_manager.repo.database.AccountEntity
 
 class AddAccountActivity : AppCompatActivity() {
 
-    private var toolbar: Toolbar? = null
-    private var editTextAccountName: EditText? = null
-    private var editTextBalance: EditText? = null
-    private var editTextCurrency: EditText? = null
-    private lateinit var accountEntity: AccountEntity
+    private lateinit var binding: ActivityAddAccountBinding
     private var viewModelAccount: AccountsViewModel? = null
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_add_account)
-        toolbar = findViewById(R.id.toolbar_add_account)
-        setSupportActionBar(toolbar)
-        if (supportActionBar != null) {
-            supportActionBar!!.setDisplayHomeAsUpEnabled(true)
-            supportActionBar!!.setDisplayShowHomeEnabled(true)
-            toolbar?.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp)
-        }
-        editTextAccountName = findViewById(R.id.editTextAccountName)
-        editTextBalance = findViewById(R.id.editTextBalance)
-        editTextCurrency = findViewById(R.id.editTextCurrency)
-        findViewById<View>(R.id.buttonSaveAccount).setOnClickListener { saveAccount() }
+        binding = ActivityAddAccountBinding.inflate(layoutInflater)
+        setContentView(binding.root)
+        initToolbar()
+        binding.buttonSaveAccount.setOnClickListener { saveAccount() }
         viewModelAccount = ViewModelProvider(this).get(AccountsViewModel::class.java)
     }
 
-    override fun onCreateOptionsMenu(menu: Menu): Boolean {
-        menuInflater.inflate(R.menu.add_account_menu, menu)
-        return true
-    }
-
-    override fun onSupportNavigateUp(): Boolean {
-        onBackPressed()
-        return true
-    }
-
-    override fun onOptionsItemSelected(item: MenuItem): Boolean {
-        if (item.itemId == R.id.action_check_account) {
-            saveAccount()
-            return true
+    private fun initToolbar() {
+        binding.toolbarAddAccount.inflateMenu(R.menu.add_or_edit_account_menu)
+        binding.toolbarAddAccount.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp)
+        binding.toolbarAddAccount.setNavigationOnClickListener { onBackPressed() }
+        binding.toolbarAddAccount.setOnMenuItemClickListener {
+            when (it.itemId) {
+                R.id.action_check_account -> saveAccount()
+            }
+            true
         }
-        return super.onOptionsItemSelected(item)
     }
 
     private fun saveAccount() {
-        val name: String = if (editTextAccountName!!.text.toString().isEmpty()) {
-            ""
-        } else {
-            editTextAccountName!!.text.toString()
-        }
-        val balance: Double = if (editTextBalance!!.text.toString().isEmpty()) {
-            0.0
-        } else {
-            editTextBalance!!.text.toString().toDouble()
-        }
-        val currency: String = if (editTextCurrency!!.text.toString().isEmpty()) {
-            ""
-        } else {
-            editTextCurrency!!.text.toString()
-        }
-        accountEntity = AccountEntity(name, balance, currency)
+        val name: String = binding.editTextAccountName.text?.toString()?.capitalize().orEmpty()
+        val balance: Double = binding.editTextBalance.text?.toString()?.toDoubleOrNull() ?: 0.0
+        val currency: String =
+            when(binding.editTextCurrency.text?.toString()) {
+                null -> "BYN"
+                "" -> "BYN"
+                else -> binding.editTextCurrency.text.toString().toUpperCase()
+            }
+        val accountEntity = AccountEntity(name, balance, currency)
         viewModelAccount!!.insert(accountEntity)
         finish()
     }
Index: app/src/main/java/com/eugene_poroshin/money_manager/EditAccountActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager\r\n\r\nimport android.os.Bundle\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.EditText\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.Toolbar\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.eugene_poroshin.money_manager.accounts.AccountsViewModel\r\nimport com.eugene_poroshin.money_manager.repo.database.AccountEntity\r\n\r\nclass EditAccountActivity : AppCompatActivity() {\r\n\r\n    private var toolbar: Toolbar? = null\r\n    private var editTextAccountName: EditText? = null\r\n    private var editTextBalance: EditText? = null\r\n    private var editTextCurrency: EditText? = null\r\n    private lateinit var accountEntity: AccountEntity\r\n    private var viewModelAccount: AccountsViewModel? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_edit_account)\r\n        toolbar = findViewById(R.id.toolbar_edit_account)\r\n        setSupportActionBar(toolbar)\r\n        if (supportActionBar != null) {\r\n            supportActionBar!!.setDisplayHomeAsUpEnabled(true)\r\n            supportActionBar!!.setDisplayShowHomeEnabled(true)\r\n            toolbar?.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp)\r\n        }\r\n        editTextAccountName = findViewById(R.id.editTextAccountNameNew)\r\n        editTextBalance = findViewById(R.id.editTextBalanceNew)\r\n        editTextCurrency = findViewById(R.id.editTextCurrencyNew)\r\n        findViewById<View>(R.id.buttonSaveAccountNew).setOnClickListener { editAccount() }\r\n        viewModelAccount =\r\n            ViewModelProvider(this).get(AccountsViewModel::class.java)\r\n        val receivedIndent = intent\r\n        if (receivedIndent != null) {\r\n            accountEntity =\r\n                receivedIndent.getSerializableExtra(AccountEntity::class.java.simpleName) as AccountEntity\r\n            editTextAccountName?.setText(accountEntity.name)\r\n            editTextBalance?.setText(accountEntity.balance.toString())\r\n            editTextCurrency?.setText(accountEntity.currency)\r\n        }\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.edit_account_menu, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        onBackPressed()\r\n        return true\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == R.id.action_check_edit_account) {\r\n            editAccount()\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n\r\n    private fun editAccount() {\r\n        val name: String = if (editTextAccountName?.text.toString().isEmpty()) {\r\n            \"\"\r\n        } else {\r\n            editTextAccountName?.text.toString()\r\n        }\r\n\r\n        val balance: Double = if (editTextBalance?.text.toString().isEmpty()) {\r\n            0.0\r\n        } else {\r\n            editTextBalance?.text.toString().toDouble()\r\n        }\r\n\r\n        val currency: String = if (editTextCurrency?.text.toString().isEmpty()) {\r\n            \"\"\r\n        } else {\r\n            editTextCurrency?.text.toString()\r\n        }\r\n        accountEntity.name = name\r\n        accountEntity.balance = balance\r\n        accountEntity.currency = currency\r\n        viewModelAccount?.update(accountEntity)\r\n        finish()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/EditAccountActivity.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/EditAccountActivity.kt	(date 1604059554613)
@@ -1,91 +1,66 @@
 package com.eugene_poroshin.money_manager
 
 import android.os.Bundle
-import android.view.Menu
-import android.view.MenuItem
-import android.view.View
-import android.widget.EditText
 import androidx.appcompat.app.AppCompatActivity
-import androidx.appcompat.widget.Toolbar
 import androidx.lifecycle.ViewModelProvider
 import com.eugene_poroshin.money_manager.accounts.AccountsViewModel
+import com.eugene_poroshin.money_manager.databinding.ActivityEditAccountBinding
 import com.eugene_poroshin.money_manager.repo.database.AccountEntity
 
 class EditAccountActivity : AppCompatActivity() {
 
-    private var toolbar: Toolbar? = null
-    private var editTextAccountName: EditText? = null
-    private var editTextBalance: EditText? = null
-    private var editTextCurrency: EditText? = null
-    private lateinit var accountEntity: AccountEntity
+    private lateinit var binding: ActivityEditAccountBinding
+    private var idAccountEntity: Int = 0
+
+    //todo how to init AccountsViewModel?
     private var viewModelAccount: AccountsViewModel? = null
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_edit_account)
-        toolbar = findViewById(R.id.toolbar_edit_account)
-        setSupportActionBar(toolbar)
-        if (supportActionBar != null) {
-            supportActionBar!!.setDisplayHomeAsUpEnabled(true)
-            supportActionBar!!.setDisplayShowHomeEnabled(true)
-            toolbar?.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp)
-        }
-        editTextAccountName = findViewById(R.id.editTextAccountNameNew)
-        editTextBalance = findViewById(R.id.editTextBalanceNew)
-        editTextCurrency = findViewById(R.id.editTextCurrencyNew)
-        findViewById<View>(R.id.buttonSaveAccountNew).setOnClickListener { editAccount() }
-        viewModelAccount =
-            ViewModelProvider(this).get(AccountsViewModel::class.java)
+        binding = ActivityEditAccountBinding.inflate(layoutInflater)
+        setContentView(binding.root)
+        initToolbar()
+
+        binding.buttonSaveAccountNew.setOnClickListener { saveAccount() }
+        viewModelAccount = ViewModelProvider(this).get(AccountsViewModel::class.java)
         val receivedIndent = intent
         if (receivedIndent != null) {
-            accountEntity =
-                receivedIndent.getSerializableExtra(AccountEntity::class.java.simpleName) as AccountEntity
-            editTextAccountName?.setText(accountEntity.name)
-            editTextBalance?.setText(accountEntity.balance.toString())
-            editTextCurrency?.setText(accountEntity.currency)
+            val accountEntity =
+                receivedIndent.getParcelableExtra(ACCOUNT_ENTITY_PARCELABLE_KEY) as AccountEntity?
+            idAccountEntity = accountEntity?.id!!
+            binding.editTextAccountNameNew.setText(accountEntity.name)
+            binding.editTextBalanceNew.setText(accountEntity.balance.toString())
+            binding.editTextCurrencyNew.setText(accountEntity.currency)
         }
     }
-
-    override fun onCreateOptionsMenu(menu: Menu): Boolean {
-        menuInflater.inflate(R.menu.edit_account_menu, menu)
-        return true
-    }
 
-    override fun onSupportNavigateUp(): Boolean {
-        onBackPressed()
-        return true
-    }
-
-    override fun onOptionsItemSelected(item: MenuItem): Boolean {
-        if (item.itemId == R.id.action_check_edit_account) {
-            editAccount()
-            return true
+    private fun initToolbar() {
+        binding.toolbarEditAccount.inflateMenu(R.menu.add_or_edit_account_menu)
+        binding.toolbarEditAccount.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp)
+        binding.toolbarEditAccount.setNavigationOnClickListener { onBackPressed() }
+        binding.toolbarEditAccount.setOnMenuItemClickListener {
+            when (it.itemId) {
+                R.id.action_check_account -> saveAccount()
+            }
+            true
         }
-        return super.onOptionsItemSelected(item)
     }
 
-    private fun editAccount() {
-        val name: String = if (editTextAccountName?.text.toString().isEmpty()) {
-            ""
-        } else {
-            editTextAccountName?.text.toString()
-        }
-
-        val balance: Double = if (editTextBalance?.text.toString().isEmpty()) {
-            0.0
-        } else {
-            editTextBalance?.text.toString().toDouble()
-        }
-
-        val currency: String = if (editTextCurrency?.text.toString().isEmpty()) {
-            ""
-        } else {
-            editTextCurrency?.text.toString()
-        }
-        accountEntity.name = name
-        accountEntity.balance = balance
-        accountEntity.currency = currency
+    private fun saveAccount() {
+        val name: String = binding.editTextAccountNameNew.text?.toString()?.capitalize().orEmpty()
+        val balance: Double = binding.editTextBalanceNew.text?.toString()?.toDoubleOrNull() ?: 0.0
+        val currency: String =
+            when (binding.editTextCurrencyNew.text?.toString()) {
+                null -> "BYN"
+                "" -> "BYN"
+                else -> binding.editTextCurrencyNew.text.toString().toUpperCase()
+            }
+        val accountEntity = AccountEntity(name, balance, currency, idAccountEntity)
         viewModelAccount?.update(accountEntity)
         finish()
     }
+
+    companion object {
+        const val ACCOUNT_ENTITY_PARCELABLE_KEY = "ACCOUNT_ENTITY_PARCELABLE_KEY"
+    }
 }
\ No newline at end of file
Index: app/src/main/res/layout/activity_add_account.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\">\r\n\r\n    <androidx.appcompat.widget.Toolbar\r\n        android:id=\"@+id/toolbar_add_account\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"?attr/actionBarSize\"\r\n        android:background=\"?attr/colorPrimary\"\r\n        android:theme=\"@style/ThemeOverlay.AppCompat.ActionBar\"\r\n        app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\r\n        app:menu=\"@menu/add_account_menu\"\r\n        app:title=\"Добавить счет\"\r\n        app:titleTextColor=\"@android:color/white\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/editTextAccountName\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"20dp\"\r\n        android:layout_marginTop=\"20dp\"\r\n        android:textSize=\"14sp\"\r\n        android:hint=\"Название счета\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/toolbar_add_account\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewAddBalance\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Текущий баланс:\"\r\n        android:textSize=\"14sp\"\r\n        android:textColor=\"@color/colorAccent\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"25dp\"\r\n        android:layout_marginTop=\"20dp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextAccountName\"/>\r\n\r\n    <EditText\r\n        android:id=\"@+id/editTextBalance\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"20dp\"\r\n        android:layout_marginTop=\"10dp\"\r\n        android:textSize=\"14sp\"\r\n        android:hint=\"Введите сумму\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewAddBalance\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewCurrencyName\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Валюта счета:\"\r\n        android:textSize=\"14sp\"\r\n        android:textColor=\"@color/colorAccent\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"25dp\"\r\n        android:layout_marginTop=\"20dp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextBalance\"/>\r\n\r\n    <EditText\r\n        android:id=\"@+id/editTextCurrency\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginLeft=\"20dp\"\r\n        android:layout_marginTop=\"10dp\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:textSize=\"14sp\"\r\n        android:hint=\"Например: BYN\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewCurrencyName\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/buttonSaveAccount\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginTop=\"40dp\"\r\n        android:layout_marginLeft=\"70dp\"\r\n        android:layout_marginRight=\"70dp\"\r\n        android:background=\"@drawable/res_background_round_rect_red\"\r\n        android:text=\"Сохранить\"\r\n        android:textAllCaps=\"false\"\r\n        android:textColor=\"@android:color/white\"\r\n        android:textSize=\"18sp\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextCurrency\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_add_account.xml	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/res/layout/activity_add_account.xml	(date 1603874785549)
@@ -1,8 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent">
 
@@ -11,24 +9,21 @@
         android:layout_width="match_parent"
         android:layout_height="?attr/actionBarSize"
         android:background="?attr/colorPrimary"
-        android:theme="@style/ThemeOverlay.AppCompat.ActionBar"
-        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
-        app:menu="@menu/add_account_menu"
-        app:title="Добавить счет"
-        app:titleTextColor="@android:color/white"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent" />
+        app:layout_constraintTop_toTopOf="parent"
+        app:title="Добавить счет"
+        app:titleTextColor="@android:color/white" />
 
     <EditText
         android:id="@+id/editTextAccountName"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_marginRight="20dp"
         android:layout_marginLeft="20dp"
         android:layout_marginTop="20dp"
-        android:textSize="14sp"
+        android:layout_marginRight="20dp"
         android:hint="Название счета"
+        android:textSize="14sp"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/toolbar_add_account" />
 
@@ -36,24 +31,24 @@
         android:id="@+id/textViewAddBalance"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:text="Текущий баланс:"
-        android:textSize="14sp"
-        android:textColor="@color/colorAccent"
-        android:layout_marginRight="20dp"
         android:layout_marginLeft="25dp"
         android:layout_marginTop="20dp"
+        android:layout_marginRight="20dp"
+        android:text="Текущий баланс:"
+        android:textColor="@color/colorAccent"
+        android:textSize="14sp"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/editTextAccountName"/>
+        app:layout_constraintTop_toBottomOf="@+id/editTextAccountName" />
 
     <EditText
         android:id="@+id/editTextBalance"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_marginRight="20dp"
         android:layout_marginLeft="20dp"
         android:layout_marginTop="10dp"
-        android:textSize="14sp"
+        android:layout_marginRight="20dp"
         android:hint="Введите сумму"
+        android:textSize="14sp"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/textViewAddBalance" />
 
@@ -61,14 +56,14 @@
         android:id="@+id/textViewCurrencyName"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
+        android:layout_marginLeft="25dp"
+        android:layout_marginTop="20dp"
+        android:layout_marginRight="20dp"
         android:text="Валюта счета:"
-        android:textSize="14sp"
         android:textColor="@color/colorAccent"
-        android:layout_marginRight="20dp"
-        android:layout_marginLeft="25dp"
-        android:layout_marginTop="20dp"
+        android:textSize="14sp"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/editTextBalance"/>
+        app:layout_constraintTop_toBottomOf="@+id/editTextBalance" />
 
     <EditText
         android:id="@+id/editTextCurrency"
@@ -77,8 +72,8 @@
         android:layout_marginLeft="20dp"
         android:layout_marginTop="10dp"
         android:layout_marginRight="20dp"
-        android:textSize="14sp"
         android:hint="Например: BYN"
+        android:textSize="14sp"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/textViewCurrencyName" />
 
@@ -86,16 +81,16 @@
         android:id="@+id/buttonSaveAccount"
         android:layout_width="match_parent"
         android:layout_height="50dp"
-        android:layout_marginTop="40dp"
         android:layout_marginLeft="70dp"
+        android:layout_marginTop="40dp"
         android:layout_marginRight="70dp"
         android:background="@drawable/res_background_round_rect_red"
         android:text="Сохранить"
         android:textAllCaps="false"
         android:textColor="@android:color/white"
         android:textSize="18sp"
-        app:layout_constraintTop_toBottomOf="@+id/editTextCurrency"
         app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent" />
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/editTextCurrency" />
 
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Wed Jul 01 15:05:49 MSK 2020\r\ndistributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-6.1.1-all.zip\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1251
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ gradle/wrapper/gradle-wrapper.properties	(date 1603025698132)
@@ -1,6 +1,6 @@
-#Wed Jul 01 15:05:49 MSK 2020
+#Sun Oct 18 15:54:58 MSK 2020
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.1.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-all.zip
Index: app/src/main/res/layout/activity_edit_account.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\">\r\n\r\n    <androidx.appcompat.widget.Toolbar\r\n        android:id=\"@+id/toolbar_edit_account\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"?attr/actionBarSize\"\r\n        android:background=\"?attr/colorPrimary\"\r\n        android:theme=\"@style/ThemeOverlay.AppCompat.ActionBar\"\r\n        app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\r\n        app:menu=\"@menu/add_account_menu\"\r\n        app:title=\"Редактировать счет\"\r\n        app:titleTextColor=\"@android:color/white\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/editTextAccountNameNew\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"20dp\"\r\n        android:layout_marginTop=\"20dp\"\r\n        android:textSize=\"14sp\"\r\n        android:hint=\"Название счета\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/toolbar_edit_account\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewEditBalance\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Текущий баланс:\"\r\n        android:textSize=\"14sp\"\r\n        android:textColor=\"@color/colorAccent\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"25dp\"\r\n        android:layout_marginTop=\"20dp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextAccountNameNew\"/>\r\n\r\n    <EditText\r\n        android:id=\"@+id/editTextBalanceNew\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"20dp\"\r\n        android:layout_marginTop=\"10dp\"\r\n        android:textSize=\"14sp\"\r\n        android:hint=\"Введите сумму\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewEditBalance\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewEditCurrencyName\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Валюта счета:\"\r\n        android:textSize=\"14sp\"\r\n        android:textColor=\"@color/colorAccent\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"25dp\"\r\n        android:layout_marginTop=\"20dp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextBalanceNew\"/>\r\n\r\n    <EditText\r\n        android:id=\"@+id/editTextCurrencyNew\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginLeft=\"20dp\"\r\n        android:layout_marginTop=\"10dp\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:textSize=\"14sp\"\r\n        android:hint=\"Например: BYN\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewEditCurrencyName\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/buttonSaveAccountNew\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginTop=\"40dp\"\r\n        android:layout_marginLeft=\"70dp\"\r\n        android:layout_marginRight=\"70dp\"\r\n        android:background=\"@drawable/res_background_round_rect_red\"\r\n        android:text=\"Сохранить\"\r\n        android:textAllCaps=\"false\"\r\n        android:textColor=\"@android:color/white\"\r\n        android:textSize=\"18sp\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextCurrencyNew\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_edit_account.xml	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/res/layout/activity_edit_account.xml	(date 1603268659820)
@@ -11,9 +11,6 @@
         android:layout_width="match_parent"
         android:layout_height="?attr/actionBarSize"
         android:background="?attr/colorPrimary"
-        android:theme="@style/ThemeOverlay.AppCompat.ActionBar"
-        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
-        app:menu="@menu/add_account_menu"
         app:title="Редактировать счет"
         app:titleTextColor="@android:color/white"
         app:layout_constraintEnd_toEndOf="parent"
Index: app/src/main/res/layout/activity_add_operation.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\">\r\n\r\n    <androidx.appcompat.widget.Toolbar\r\n        android:id=\"@+id/toolbar_add_operation\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"?attr/actionBarSize\"\r\n        android:background=\"?attr/colorPrimary\"\r\n        android:theme=\"@style/ThemeOverlay.AppCompat.ActionBar\"\r\n        app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\r\n        app:menu=\"@menu/add_operation_menu\"\r\n        app:title=\"Расход\"\r\n        app:titleTextColor=\"@android:color/white\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <RadioGroup\r\n        android:id=\"@+id/radioGroup\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginLeft=\"20dp\"\r\n        android:layout_marginTop=\"20dp\"\r\n        android:orientation=\"horizontal\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/toolbar_add_operation\">\r\n\r\n        <RadioButton\r\n            android:id=\"@+id/radioButtonConsumption\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Расход\"\r\n            android:textSize=\"14sp\"\r\n            android:checked=\"true\"/>\r\n\r\n        <RadioButton\r\n            android:id=\"@+id/radioButtonIncome\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginLeft=\"20dp\"\r\n            android:text=\"Доход\"\r\n            android:textSize=\"14sp\"\r\n            android:checked=\"false\"/>\r\n\r\n    </RadioGroup>\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewSelectCategory\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Выберите категорию:\"\r\n        android:textSize=\"14sp\"\r\n        android:textColor=\"@color/colorAccent\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"25dp\"\r\n        android:layout_marginTop=\"20dp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/radioGroup\"/>\r\n\r\n    <Spinner\r\n        android:id=\"@+id/spinnerCategories\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"20dp\"\r\n        android:layout_marginTop=\"10dp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewSelectCategory\"/>\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewSelectAccount\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Выберите счет:\"\r\n        android:textSize=\"14sp\"\r\n        android:textColor=\"@color/colorAccent\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"25dp\"\r\n        android:layout_marginTop=\"25dp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/spinnerCategories\"/>\r\n\r\n    <Spinner\r\n        android:id=\"@+id/spinnerAccounts\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"20dp\"\r\n        android:layout_marginTop=\"10dp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewSelectAccount\"/>\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewAddBalance\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Введите сумму:\"\r\n        android:textSize=\"14sp\"\r\n        android:textColor=\"@color/colorAccent\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"25dp\"\r\n        android:layout_marginTop=\"25dp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/spinnerAccounts\"/>\r\n\r\n    <EditText\r\n        android:id=\"@+id/editTextBalance\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:layout_marginLeft=\"20dp\"\r\n        android:layout_marginTop=\"10dp\"\r\n        android:textSize=\"14sp\"\r\n        android:hint=\"Сумма\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewAddBalance\" />\r\n\r\n    <EditText\r\n        android:id=\"@+id/editTextDescription\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginLeft=\"20dp\"\r\n        android:layout_marginTop=\"20dp\"\r\n        android:layout_marginRight=\"20dp\"\r\n        android:textSize=\"14sp\"\r\n        android:hint=\"Описание (опционально)\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextBalance\" />\r\n\r\n    <Button\r\n        android:id=\"@+id/buttonSaveOperation\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"50dp\"\r\n        android:layout_marginLeft=\"70dp\"\r\n        android:layout_marginRight=\"70dp\"\r\n        android:background=\"@drawable/res_background_round_rect_red\"\r\n        android:text=\"Сохранить\"\r\n        android:textAllCaps=\"false\"\r\n        android:textColor=\"@android:color/white\"\r\n        android:textSize=\"18sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextDescription\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_add_operation.xml	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/res/layout/activity_add_operation.xml	(date 1603806365472)
@@ -11,9 +11,6 @@
         android:layout_width="match_parent"
         android:layout_height="?attr/actionBarSize"
         android:background="?attr/colorPrimary"
-        android:theme="@style/ThemeOverlay.AppCompat.ActionBar"
-        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
-        app:menu="@menu/add_operation_menu"
         app:title="Расход"
         app:titleTextColor="@android:color/white"
         app:layout_constraintEnd_toEndOf="parent"
Index: app/src/main/res/layout/fragment_accounts.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\">\r\n\r\n    <androidx.appcompat.widget.Toolbar\r\n        android:id=\"@+id/my_toolbar\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"?attr/actionBarSize\"\r\n        android:background=\"?attr/colorPrimary\"\r\n        android:elevation=\"4dp\"\r\n        android:theme=\"@style/ThemeOverlay.AppCompat.ActionBar\"\r\n        app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\r\n        app:menu=\"@menu/accounts_menu\"\r\n        app:title=\"Баланс\"\r\n        app:titleTextColor=\"@color/text_icons\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/recycler_view_accounts\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/my_toolbar\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_accounts.xml	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/res/layout/fragment_accounts.xml	(date 1603982943437)
@@ -11,10 +11,6 @@
         android:layout_width="match_parent"
         android:layout_height="?attr/actionBarSize"
         android:background="?attr/colorPrimary"
-        android:elevation="4dp"
-        android:theme="@style/ThemeOverlay.AppCompat.ActionBar"
-        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
-        app:menu="@menu/accounts_menu"
         app:title="Баланс"
         app:titleTextColor="@color/text_icons"
         app:layout_constraintEnd_toEndOf="parent"
Index: app/src/main/res/layout/fragment_categories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\r\n\r\n    <androidx.appcompat.widget.Toolbar\r\n        android:id=\"@+id/my_toolbar\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"?attr/actionBarSize\"\r\n        android:background=\"?attr/colorPrimary\"\r\n        app:title=\"Все категории\"\r\n        app:menu=\"@menu/categories_menu\"\r\n        app:titleTextColor=\"@color/text_icons\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:id=\"@+id/recycler_view_categories\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@id/my_toolbar\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_categories.xml	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/res/layout/fragment_categories.xml	(date 1603982943430)
@@ -10,7 +10,6 @@
         android:layout_height="?attr/actionBarSize"
         android:background="?attr/colorPrimary"
         app:title="Все категории"
-        app:menu="@menu/categories_menu"
         app:titleTextColor="@color/text_icons"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
Index: app/src/main/java/com/eugene_poroshin/money_manager/repo/database/OperationEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.repo.database\r\n\r\nimport androidx.room.ColumnInfo\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\nimport androidx.room.TypeConverters\r\nimport com.eugene_poroshin.money_manager.operations.OperationType\r\nimport com.eugene_poroshin.money_manager.operations.OperationTypeConverter\r\n\r\n@Entity(tableName = \"operations\")\r\nclass OperationEntity(\r\n    @field:ColumnInfo(name = \"operation_category_id\") val categoryId: Int,\r\n    @field:ColumnInfo(name = \"operation_account_id\") val accountId: Int,\r\n    @field:ColumnInfo(name = \"operation_date\") val date: Long,\r\n    @field:ColumnInfo(name = \"operation_sum\") val sum: Double,\r\n    @field:ColumnInfo(name = \"operation_description\") val description: String,\r\n    @field:TypeConverters(OperationTypeConverter::class)\r\n    @field:ColumnInfo(name = \"operation_type\") val type: OperationType,\r\n    @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"operation_id\") var id: Int = 0\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/repo/database/OperationEntity.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/repo/database/OperationEntity.kt	(date 1604047308816)
@@ -3,9 +3,7 @@
 import androidx.room.ColumnInfo
 import androidx.room.Entity
 import androidx.room.PrimaryKey
-import androidx.room.TypeConverters
 import com.eugene_poroshin.money_manager.operations.OperationType
-import com.eugene_poroshin.money_manager.operations.OperationTypeConverter
 
 @Entity(tableName = "operations")
 class OperationEntity(
@@ -14,7 +12,6 @@
     @field:ColumnInfo(name = "operation_date") val date: Long,
     @field:ColumnInfo(name = "operation_sum") val sum: Double,
     @field:ColumnInfo(name = "operation_description") val description: String,
-    @field:TypeConverters(OperationTypeConverter::class)
     @field:ColumnInfo(name = "operation_type") val type: OperationType,
     @PrimaryKey(autoGenerate = true) @ColumnInfo(name = "operation_id") var id: Int = 0
 )
\ No newline at end of file
Index: app/src/main/java/com/eugene_poroshin/money_manager/repo/database/AccountEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.repo.database\r\n\r\nimport androidx.room.ColumnInfo\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\nimport java.io.Serializable\r\n\r\n@Entity(tableName = \"accounts\")\r\nclass AccountEntity(\r\n    @field:ColumnInfo(name = \"account_name\") var name: String,\r\n    @field:ColumnInfo(name = \"account_balance\") var balance: Double,\r\n    @field:ColumnInfo(name = \"account_currency\") var currency: String,\r\n    @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"account_id\") var id: Int = 0\r\n) : Serializable
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/repo/database/AccountEntity.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/repo/database/AccountEntity.kt	(date 1603372617142)
@@ -1,14 +1,16 @@
 package com.eugene_poroshin.money_manager.repo.database
 
+import android.os.Parcelable
 import androidx.room.ColumnInfo
 import androidx.room.Entity
 import androidx.room.PrimaryKey
-import java.io.Serializable
+import kotlinx.android.parcel.Parcelize
 
+@Parcelize
 @Entity(tableName = "accounts")
-class AccountEntity(
+data class AccountEntity(
     @field:ColumnInfo(name = "account_name") var name: String,
     @field:ColumnInfo(name = "account_balance") var balance: Double,
     @field:ColumnInfo(name = "account_currency") var currency: String,
     @PrimaryKey(autoGenerate = true) @ColumnInfo(name = "account_id") var id: Int = 0
-) : Serializable
\ No newline at end of file
+) : Parcelable
\ No newline at end of file
Index: app/src/main/java/com/eugene_poroshin/money_manager/repo/database/AppDatabase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.repo.database\r\n\r\nimport android.content.Context\r\nimport androidx.room.Database\r\nimport androidx.room.Room\r\nimport androidx.room.RoomDatabase\r\nimport androidx.sqlite.db.SupportSQLiteDatabase\r\nimport com.eugene_poroshin.money_manager.operations.OperationType\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.launch\r\n\r\n@Database(\r\n    entities = [CategoryEntity::class, AccountEntity::class, OperationEntity::class],\r\n    version = 1,\r\n    exportSchema = false\r\n)\r\nabstract class AppDatabase : RoomDatabase() {\r\n\r\n    abstract fun categoryDao(): CategoryDao\r\n    abstract fun accountDao(): AccountDao\r\n    abstract fun operationDao(): OperationDao\r\n\r\n    private class AppDatabaseCallback(\r\n        private val scope: CoroutineScope\r\n    ) : RoomDatabase.Callback() {\r\n\r\n        override fun onCreate(db: SupportSQLiteDatabase) {\r\n            super.onCreate(db)\r\n            INSTANCE?.let { database ->\r\n                scope.launch {\r\n                    populateDatabase(database.categoryDao(), database.accountDao())\r\n                }\r\n            }\r\n        }\r\n\r\n        suspend fun populateDatabase(categoryDao: CategoryDao, accountDao: AccountDao) {\r\n            var category = CategoryEntity(\"Продукты\")\r\n            categoryDao.insert(category)\r\n            category = CategoryEntity(\"Здоровье\")\r\n            categoryDao.insert(category)\r\n            category = CategoryEntity(\"Кафе\")\r\n            categoryDao.insert(category)\r\n            category = CategoryEntity(\"Досуг\")\r\n            categoryDao.insert(category)\r\n            category = CategoryEntity(\"Транспорт\")\r\n            categoryDao.insert(category)\r\n            category = CategoryEntity(\"Подарки\")\r\n            categoryDao.insert(category)\r\n            category = CategoryEntity(\"Покупки\")\r\n            categoryDao.insert(category)\r\n            category = CategoryEntity(\"Семья\")\r\n            categoryDao.insert(category)\r\n            category = CategoryEntity(\"Зарплата\")\r\n            categoryDao.insert(category)\r\n            var account = AccountEntity(\"Наличные\", 0.0, \"BYN\")\r\n            accountDao.insert(account)\r\n            account = AccountEntity(\"Карта\", 0.0, \"BYN\")\r\n            accountDao.insert(account)\r\n        }\r\n    }\r\n\r\n    companion object {\r\n\r\n        @Volatile\r\n        private var INSTANCE: AppDatabase? = null\r\n\r\n        fun getDatabase(context: Context, scope: CoroutineScope): AppDatabase {\r\n            val tempInstance = INSTANCE\r\n            if (tempInstance != null) {\r\n                return tempInstance\r\n            }\r\n            synchronized(this) {\r\n                val instance = Room.databaseBuilder(\r\n                    context.applicationContext,\r\n                    AppDatabase::class.java,\r\n                    \"db_save_money.db\"\r\n                )\r\n                    .addCallback(AppDatabaseCallback(scope))\r\n                    .build()\r\n                INSTANCE = instance\r\n                return instance\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/repo/database/AppDatabase.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/repo/database/AppDatabase.kt	(date 1603366452030)
@@ -4,11 +4,14 @@
 import androidx.room.Database
 import androidx.room.Room
 import androidx.room.RoomDatabase
+import androidx.room.TypeConverters
 import androidx.sqlite.db.SupportSQLiteDatabase
 import com.eugene_poroshin.money_manager.operations.OperationType
+import com.eugene_poroshin.money_manager.operations.OperationTypeConverter
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.launch
 
+@TypeConverters(OperationTypeConverter::class)
 @Database(
     entities = [CategoryEntity::class, AccountEntity::class, OperationEntity::class],
     version = 1,
@@ -20,45 +23,6 @@
     abstract fun accountDao(): AccountDao
     abstract fun operationDao(): OperationDao
 
-    private class AppDatabaseCallback(
-        private val scope: CoroutineScope
-    ) : RoomDatabase.Callback() {
-
-        override fun onCreate(db: SupportSQLiteDatabase) {
-            super.onCreate(db)
-            INSTANCE?.let { database ->
-                scope.launch {
-                    populateDatabase(database.categoryDao(), database.accountDao())
-                }
-            }
-        }
-
-        suspend fun populateDatabase(categoryDao: CategoryDao, accountDao: AccountDao) {
-            var category = CategoryEntity("Продукты")
-            categoryDao.insert(category)
-            category = CategoryEntity("Здоровье")
-            categoryDao.insert(category)
-            category = CategoryEntity("Кафе")
-            categoryDao.insert(category)
-            category = CategoryEntity("Досуг")
-            categoryDao.insert(category)
-            category = CategoryEntity("Транспорт")
-            categoryDao.insert(category)
-            category = CategoryEntity("Подарки")
-            categoryDao.insert(category)
-            category = CategoryEntity("Покупки")
-            categoryDao.insert(category)
-            category = CategoryEntity("Семья")
-            categoryDao.insert(category)
-            category = CategoryEntity("Зарплата")
-            categoryDao.insert(category)
-            var account = AccountEntity("Наличные", 0.0, "BYN")
-            accountDao.insert(account)
-            account = AccountEntity("Карта", 0.0, "BYN")
-            accountDao.insert(account)
-        }
-    }
-
     companion object {
 
         @Volatile
@@ -75,7 +39,7 @@
                     AppDatabase::class.java,
                     "db_save_money.db"
                 )
-                    .addCallback(AppDatabaseCallback(scope))
+                    .createFromAsset("database/save_money.db")
                     .build()
                 INSTANCE = instance
                 return instance
Index: app/src/main/java/com/eugene_poroshin/money_manager/accounts/AccountsViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.eugene_poroshin.money_manager.accounts\r\n\r\nimport android.app.Application\r\nimport androidx.lifecycle.AndroidViewModel\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.eugene_poroshin.money_manager.repo.Repository\r\nimport com.eugene_poroshin.money_manager.repo.database.AccountEntity\r\nimport com.eugene_poroshin.money_manager.repo.database.AppDatabase\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\n\r\nclass AccountsViewModel(application: Application) : AndroidViewModel(application) {\r\n\r\n    private val accountDao = AppDatabase.getDatabase(application, viewModelScope).accountDao()\r\n    private val repository = Repository.AccountRepository(accountDao)\r\n\r\n    val liveDataAccounts: LiveData<List<AccountEntity>> = repository.allAccounts\r\n    val liveDataAccountNames: LiveData<List<String>> = repository.accountNames\r\n\r\n    fun insert(accounts: AccountEntity) = viewModelScope.launch(Dispatchers.IO) {\r\n        repository.insert(accounts)\r\n    }\r\n\r\n    fun update(accounts: AccountEntity) = viewModelScope.launch(Dispatchers.IO) {\r\n        repository.update(accounts)\r\n    }\r\n\r\n    fun delete(accounts: AccountEntity) = viewModelScope.launch(Dispatchers.IO) {\r\n        repository.delete(accounts)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/eugene_poroshin/money_manager/accounts/AccountsViewModel.kt	(revision f912442eb5689dea3835e3b22fe27a043f04b084)
+++ app/src/main/java/com/eugene_poroshin/money_manager/accounts/AccountsViewModel.kt	(date 1603271306427)
@@ -1,6 +1,7 @@
 package com.eugene_poroshin.money_manager.accounts
 
 import android.app.Application
+import android.util.Log
 import androidx.lifecycle.AndroidViewModel
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.viewModelScope
